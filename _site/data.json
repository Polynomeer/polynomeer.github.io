[{"layout":"default","title":"Pure Function","content":"# Pure Function\n\n컴퓨터 프로그래밍에서 순수함수(pure function)이란, 다음과 같은 속성을 갖는다.\n\n1. 함수가 같은 어규먼트(입력)에 대해서 항상 같은 리턴값(결과)를 낸다.\n2. 함수의 평가는 [사이드 이팩트](https://en.wikipedia.org/wiki/Side_effect_(computer_science))가 없다.\n\n\n\n### References\n\n- https://en.wikipedia.org/wiki/Pure_function\n- https://jeong-pro.tistory.com/23\n- https://evan-moon.github.io/2019/12/29/about-pure-functions/\n- https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/\n- https://www.sitepoint.com/functional-programming-pure-functions/\n- https://blog.bitsrc.io/basics-of-javascript-pure-functions-3e6f3437066\n- https://programmingwithmosh.com/javascript/what-are-pure-functions/\n- https://stackoverflow.com/questions/58744557/is-this-a-pure-function\n- https://elmprogramming.com/pure-functions.html\n- https://www.sitepoint.com/functional-programming-pure-functions/","dir":"/Archive/FP/","name":"Pure Function.md","path":"Archive/FP/Pure Function.md","url":"/Archive/FP/Pure%20Function.html"},{"permalink":"/Archive/FP/","layout":"default","title":"FP","content":"# FP\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/Archive/FP/","name":"README.md","path":"Archive/FP/README.md","url":"/Archive/FP/"},{"layout":"default","title":"GC","content":"# GC\n","dir":"/Archive/Java/","name":"GC.md","path":"Archive/Java/GC.md","url":"/Archive/Java/GC.html"},{"layout":"default","title":"JVM","content":"# JVM\r\n\r\n","dir":"/Archive/Java/","name":"JVM.md","path":"Archive/Java/JVM.md","url":"/Archive/Java/JVM.html"},{"permalink":"/Archive/Java/","layout":"default","title":"Java","content":"# Java\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/Archive/Java/","name":"README.md","path":"Archive/Java/README.md","url":"/Archive/Java/"},{"permalink":"/Archive/OOP/","layout":"default","title":"OOP","content":"# OOP\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/Archive/OOP/","name":"README.md","path":"Archive/OOP/README.md","url":"/Archive/OOP/"},{"layout":"default","title":"Closure","content":"# Closure\n\n클로저는 어떤 함수가 주변 상태(렉시컬 환경)에 대한 참조와 함께 번들로 묶인(포함된) 함수의 조합이다. 즉, 클로저를 사용하면 내부함수에서 외부함수의 범위에 접근할 수 있다. 자바 스크립트에서는 함수가 생성될 때 마다 클로저가 생성된다.\n\n- 클로저(closure)는 내부함수가 외부함수의 맥락(context)에 접근할 수 있는 것을 가리킨다. \n- 클로저는 독립적인 (자유)변수를 가리키는 함수이다. 또는, 클로저 안에 정의된 함수는 만들어진 환경을 **기억한다**.\n\n\n\n### References\n\n- https://opentutorials.org/course/743/6544\n- https://www.geeksforgeeks.org/closures-in-java-with-examples/\n- https://stackoverflow.com/questions/3805474/what-is-a-closure-does-java-have-closures/3805546\n- https://hyunseob.github.io/2016/08/30/javascript-closure/\n- https://poiemaweb.com/js-closure\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\n\n","dir":"/Archive/Programming/","name":"Closure.md","path":"Archive/Programming/Closure.md","url":"/Archive/Programming/Closure.html"},{"layout":"default","title":"Higher-order Function","content":"# Higher-order Function\n\n고차함수(higer-order function)는 함수를 아규먼트로 전달받거나 함수를 결과로 반환하는 함수를 말한다. 고차함수는 아규먼트로 받은 함수를 필요한 시점에 호출하거나 클로저를 생성하여 반환한다. 자바스크립트의 함수는 일급 객체이므로 값처럼 아규먼트로 전달할 수 있으면 반환할 수도 있다.\n\n### References\n\n- https://velog.io/@victor/%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98%EB%9E%80%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98\n- \n\n","dir":"/Archive/Programming/","name":"Higher-order Function.md","path":"Archive/Programming/Higher-order Function.md","url":"/Archive/Programming/Higher-order%20Function.html"},{"layout":"default","title":"Object-Oriented Programming(OOP) and Functional Programming(FP)","content":"# Object-Oriented Programming(OOP) and Functional Programming(FP)\n\n\n\n## Object-Oriented Programming(OOP)\n\n객체 지향적 프로그래밍은 프로그래밍 패러다임 중 하나로써 프로그래밍 하고자 하는 무언가(때때로 실세계의 사물)를 표현하기위해서 객체를 사용하는 프로그래밍 방법이다. 이 객체들은 자료구조가 될 수 있다. 그 객체는 속성으로서 그들에 관한 데이터를 가지고 있다. 이 객체의 속성은 메서드나 함수를 통해서 조작이 가능한데, 그 메서드 또한 객체로부터 얻어진다. `객체는 상태(속성)와 행동(기능, 메서드)`을 가진다.\n\n\n\n## Functional Programming(FP)\n\n함수적 프로그래밍은 상태의 변경과 가변 데이터를 피하기위한 시도에서 시작된 프로그래밍의 한 형식이다. 함수적 프로그래밍에서 해당 함수에 대한 출력값은 정확히 같은 입력값에 대하여 항상 같아야 한다.\n\n이것은 함수적 프로그래밍에서 함수의 출력이 순수하게 함수의 인자값에 의존하기 때문이다. 갑자기 뒤에서 마술같은 변경이 일어나서는 안된다는 의미이다. 이것은 코드에 있어서 `side effects`를 제거해준다.\n\n\n\n### References\n\n- https://medium.com/@shaistha24/functional-programming-vs-object-oriented-programming-oop-which-is-better-82172e53a526\n\n- 객체지향의 사실과 오해(조영호, 위키북스)","dir":"/Archive/Programming/","name":"Object-Oriented Programming(OOP) and Functional Programming(FP).md","path":"Archive/Programming/Object-Oriented Programming(OOP) and Functional Programming(FP).md","url":"/Archive/Programming/Object-Oriented%20Programming(OOP)%20and%20Functional%20Programming(FP).html"},{"layout":"default","title":"Programming Paradigm","content":"# Programming Paradigm\n\n````\n패러다임(paradigm)은 어떤 한 시대 사람들의 견해나 사고를 근본적으로 규정하고 있는 테두리로서의 인식의 체계, 또는 사물에 대한 이론적인 틀이나 체계를 의미한다. - From.wikipedia -\n````\n\n프로그래밍 패러다임은 어떤 프로그래밍 언어를 사용하여 문제를 해결하기위한 접근법이다. 혹은 우리들로 하여금 어떠한 접근방식을 따를수 있도록 해주는 특정 도구나 기술을 사용하여 문제를 해결할 수 있는 방법을 의미한다. 이미 많은 프로그래밍 언어가 있는데, 그 언어들도 결국 구현될 때 어떠한 전략을 따를 필요가 있었으며, 그 전략이나 방법론을 패러다임이라고 부른다. 수많은 언어들에 비해 패러다임은 많지 않다. 많은 사람들의 지지를 받지 않았다면 그것은 이미 패러다임은 아닐 것이다. \n\n가장 큰 분류는 크게 두 가지로 나뉜다. 명령형 프로그래밍(Imperative Programming Paradigm)과 선언형 프로그래밍(Declarative Programming Paradigm)이다.\n\n## 1. Imperative programming paradigm\n\n이는 가장 오래된 프로그래밍 패러다임 중 하나이다. 이는 기계 구조의 특징과 밀접한 연관이 있다. 폰 노이만 아키텍쳐에 근간을 두고 있으며, 할당(대입) 연산을 통해 프로그램 상태를 변경시키는 동작을 한다. 따라서 상태를 변경함으로써 단계별로 동작을 수행한다. 핵심 원리는 어떻게 목적을 달성하는가이다. 이 패러다임은 몇가지 상태와 다음 실행될 결과를 모두 저장한다.\n\n- Advantage\n\n 1) 구현하기가 매우 간단하다.\n\n 2) loop, 변수 등을 포함한다.\n\n- Disadvantage\n\n 1) 복잡한 문제를 해결하기 매우 힘들다.\n\n 2) 저생산적이고 저효율적이다.\n\n 3) 병렬 프로그래밍이 불가능하다.\n\n- Examples\n\n C, Fortran, Basic\n\n### 1.1. Procedural programming paradigm\n\n이 패러다임은 머신 모델의 관점에서의 절차를 강조한다. 때문에 Imperative 접근 방식과 차이점이 없어서 동의어로 사용되기도 한다. 이는 재사용성 때문에 사용중인 코드를 재사용할 수 있는 기능을 제공한다.\n\n- Examples\n\n 1) C, C++, Java, ColdFusion, Pascal\n\n### 1.2. Object oriented programming ★\n\n프로그램은 의사소통에 사용되는 클래스와 오브젝트의 모음이다. 가장 작고 기본적인 엔티티는 객체이며 모든 종류의 연산은 객체를 통해서만 이루어진다. 절차보다는 데이터에 더 중점을 둔다. 오늘날 현실세계의 거의 모든 문제를 다룰 수 있다. 왜냐하면 소프트웨어 세계에서의 객체를 현실세계에서의 객체로 빗대어서 이해하기가 쉽기 때문이다. 실제로 소프트웨어에서의 객체는 현실세계에서의 객체보다 훨씬 큰 의미일수도 있고, 유연하다. 이에 대해서는 좀 더 깊은 이해가 필요하다.\n\n- Advantages\n\n 1) 데이터 보안성\n\n 2) 상속성\n\n 3) 코드 재사용성\n\n 4) 유연하며 추상화를 구현한다.\n\n- Disadvantages\n\n 단점은 시대의 변화와 기술의 발전에 따라서 상대적인데, 함수적 프로그래밍이 대두되고 있는 이유가 바로 OOP의 단점을 보완하기 위한 것이라고 볼 수 있다.\n\n 1) 코드의 변화에 따라 테스트 코드를 작성하는 것이 비교적 어렵다.\n\n 2) 클래스 변수나 다른 외부의 데이터를 가져다 쓰는 메서드의 경우, 멀티 쓰레드 환경에서의 프로그래밍, 병렬 프로그래밍이 어렵다.\n\n 3) 비교적 코드가 복잡하다.\n\n- Examples\n\n Simula, Java, C++, Objective-C, Visual Basic .NET, Python, Ruby, Smalltalk\n\n### 1.3. Parallel processing approach\n\n병렬 처리는 여러개의 프로세서들 사이에서 명령을 나누기 위한 처리를 프로그래밍하기 위한 것이다. 병렬 처리 시스템은 여러개의 프로세서를 보유하는데, 프로그램을 분할하여 더 짧은 시간에 실행할 수 있도록 보장한다. 이 접근방식은 divide and conquer방식과 비슷하다.\n\n## 2. Declarative programming paradigm\n\n선언형 프로그래밍은 프로그램을 빌딩할때 제어 흐름을 빼고 연산의 로직을 표현하기위한 방법이다. 이는 종종 어떤 로직의 이론으로서 프로그램을 고려한다. 이는 병령 프로그램을 작성하는것을 단순화해준다. `어떻게 완료되는가?` 보다는 `완료되기 위해서 무엇이 필요한가?`에 중점을 둠으로써 기본적으로 `코드가 실제로 무엇을 하는가?`를 강조한다. 이것이 명령형 프로그래밍(how to do)과 선언형 프로그래밍(what to do) 패러다임의 유일한 차이점이다.\n\n### 2.1. Logic programming paradigm\n\n이는 연산의 추상적 모델이라고 할 수 있다. 이는 논리적 문제들을 마치 퍼즐이나 시리즈처럼 해결하는 것과 비슷하다. 논리 프로그래밍에서 우리는 사전에 이미 알고있는 지식 기반을 가지고 있으며, 그 기반에 추가로 기계에 주어진 질문 및 지식 기반과 함께 결과를 생성한다. 일반 프로그래밍 언어에서는 이러한 지식 기반 개념을 사용할 수 없지만 인공 지능, 기계 학습이라는 개념을 사용하면서 동일한 매커니즘을 사용하는 인지 모델과 같은 모델이 있다.\n\n논리 프로그래밍에서 핵심 강조사항은 지식 기반과 문제이다. 프로그램의 실행은 수학적인 문장의 증명과 매우 유사하다.\n\n### 2.2. Functional programming paradigm ★\n\n함수적 프로그래밍 패러다임은 수학에 근간을 두고있으며 언어 독립적이다. 이 패러다임의 핵심원칙은 일련의 수학적 함수를 실행하는 것이다. 추상화의 중심 모델은 데이터 구조가 아닌 특정 계산을 하기위한 기능이다. 데이터는 함수와 느슨하게 결합되며 함수는 구현을 숨긴다. 함수는 프로그램의 의미를 변경하지 않고 기능을 해당 값으로 대체할 수 있다. \n\n### 2.3. Database/Data driven programming approach\n\n이 프로그래밍 방법론은 데이터와 데이터 이동을 기반으로합니다. 프로그램 문은 일련의 단계를 하드 코딩하는 대신 데이터로 정의됩니다. 데이터베이스 프로그램은 비즈니스 정보 시스템의 핵심이며 파일 생성, 데이터 입력, 업데이트, 쿼리 및보고 기능을 제공합니다. 주로 데이터베이스 애플리케이션을 위해 개발 된 몇 가지 프로그래밍 언어가 있습니다. 예를 들어 SQL. 필터링, 변환, 집계 (예 : 통계 계산) 또는 다른 프로그램 호출을 위해 구조화 된 데이터 스트림에 적용됩니다. 따라서 자체적으로 광범위한 응용 프로그램이 있습니다.\n\n","dir":"/Archive/Programming/","name":"Programming Paradigms.md","path":"Archive/Programming/Programming Paradigms.md","url":"/Archive/Programming/Programming%20Paradigms.html"},{"layout":"default","title":"Pure Function","content":"# Pure Function\n\n컴퓨터 프로그래밍에서 순수함수(pure function)이란, 다음과 같은 속성을 갖는다.\n\n1. 함수가 같은 어규먼트(입력)에 대해서 항상 같은 리턴값(결과)를 낸다.\n2. 함수의 평가는 [사이드 이팩트](https://en.wikipedia.org/wiki/Side_effect_(computer_science))가 없다.\n\n\n\n### References\n\n- https://en.wikipedia.org/wiki/Pure_function\n- https://jeong-pro.tistory.com/23\n- https://evan-moon.github.io/2019/12/29/about-pure-functions/\n- https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/\n- https://www.sitepoint.com/functional-programming-pure-functions/\n- https://blog.bitsrc.io/basics-of-javascript-pure-functions-3e6f3437066\n- https://programmingwithmosh.com/javascript/what-are-pure-functions/\n- https://stackoverflow.com/questions/58744557/is-this-a-pure-function\n- https://elmprogramming.com/pure-functions.html\n- https://www.sitepoint.com/functional-programming-pure-functions/","dir":"/Archive/Programming/","name":"Pure Function.md","path":"Archive/Programming/Pure Function.md","url":"/Archive/Programming/Pure%20Function.html"},{"permalink":"/Archive/Programming/","layout":"default","title":"Programming","content":"# Programming\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/Archive/Programming/","name":"README.md","path":"Archive/Programming/README.md","url":"/Archive/Programming/"},{"layout":"default","title":"Closure","content":"# Closure\n\n클로저는 어떤 함수가 주변 상태(렉시컬 환경)에 대한 참조와 함께 번들로 묶인(포함된) 함수의 조합이다. 즉, 클로저를 사용하면 내부함수에서 외부함수의 범위에 접근할 수 있다. 자바 스크립트에서는 함수가 생성될 때 마다 클로저가 생성된다.\n\n- 클로저(closure)는 내부함수가 외부함수의 맥락(context)에 접근할 수 있는 것을 가리킨다. \n- 클로저는 독립적인 (자유)변수를 가리키는 함수이다. 또는, 클로저 안에 정의된 함수는 만들어진 환경을 **기억한다**.\n\n\n\n### References\n\n- https://opentutorials.org/course/743/6544\n- https://www.geeksforgeeks.org/closures-in-java-with-examples/\n- https://stackoverflow.com/questions/3805474/what-is-a-closure-does-java-have-closures/3805546\n- https://hyunseob.github.io/2016/08/30/javascript-closure/\n- https://poiemaweb.com/js-closure\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\n\n","dir":"/Archive/FP/","name":"Closure.md","path":"Archive/FP/Closure.md","url":"/Archive/FP/Closure.html"},{"layout":"default","title":"AOP","content":"# AOP\n","dir":"/Archive/Spring/","name":"AOP.md","path":"Archive/Spring/AOP.md","url":"/Archive/Spring/AOP.html"},{"layout":"default","title":"DI","content":"# DI\n","dir":"/Archive/Spring/","name":"DI.md","path":"Archive/Spring/DI.md","url":"/Archive/Spring/DI.html"},{"permalink":"/Archive/Spring/","layout":"default","title":"Spring","content":"# Spring\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/Archive/Spring/","name":"README.md","path":"Archive/Spring/README.md","url":"/Archive/Spring/"},{"layout":"default","title":null,"content":"\n```\n ~/Desktop/Blog/polynomeer.github.io   main ● ?  jekyll serve\nIgnoring commonmarker-0.17.13 because its extensions are not built. Try: gem pristine commonmarker --version 0.17.13\nIgnoring nokogiri-1.10.10 because its extensions are not built. Try: gem pristine nokogiri --version 1.10.10\nIgnoring unf_ext-0.0.7.7 because its extensions are not built. Try: gem pristine unf_ext --version 0.0.7.7\nTraceback (most recent call last):\n\t11: from /usr/local/bin/jekyll:23:in `<main>'\n\t10: from /usr/local/bin/jekyll:23:in `load'\n\t 9: from /Library/Ruby/Gems/2.6.0/gems/jekyll-4.2.0/exe/jekyll:11:in `<top (required)>'\n\t 8: from /Library/Ruby/Gems/2.6.0/gems/jekyll-4.2.0/lib/jekyll/plugin_manager.rb:52:in `require_from_bundler'\n\t 7: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler.rb:101:in `setup'\n\t 6: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler.rb:135:in `definition'\n\t 5: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/definition.rb:34:in `build'\n\t 4: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:12:in `evaluate'\n\t 3: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:47:in `eval_gemfile'\n\t 2: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:47:in `instance_eval'\n\t 1: from /Users/ham/Desktop/Blog/polynomeer.github.io/Gemfile:5:in `eval_gemfile'\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:138:in `gem': You cannot specify the same gem twice coming from different sources. (Bundler::GemfileError)\nYou specified that jekyll-rtd-theme (>= 0) should come from source at `.` and\n\t11: from /usr/local/bin/jekyll:23:in `<main>'\n\t10: from /usr/local/bin/jekyll:23:in `load'\n\t 9: from /Library/Ruby/Gems/2.6.0/gems/jekyll-4.2.0/exe/jekyll:11:in `<top (required)>'\n\t 8: from /Library/Ruby/Gems/2.6.0/gems/jekyll-4.2.0/lib/jekyll/plugin_manager.rb:52:in `require_from_bundler'\n\t 7: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler.rb:101:in `setup'\n\t 6: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler.rb:135:in `definition'\n\t 5: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/definition.rb:34:in `build'\n\t 4: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:12:in `evaluate'\n\t 3: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:47:in `eval_gemfile'\n\t 2: from /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:47:in `instance_eval'\n\t 1: from /Users/ham/Desktop/Blog/polynomeer.github.io/Gemfile:5:in `eval_gemfile'\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/bundler/dsl.rb:138:in `gem': (Bundler::Dsl::DSLError)\n[!] There was an error parsing `Gemfile`: You cannot specify the same gem twice coming from different sources.\nYou specified that jekyll-rtd-theme (>= 0) should come from source at `.` and\n. Bundler cannot continue.\n\n # from /Users/ham/Desktop/Blog/polynomeer.github.io/Gemfile:5\n # -------------------------------------------\n #\n > gem \"jekyll-rtd-theme\"\n #\n # -------------------------------------------\n```\n\n디렉터리 내부에 Gemfile에서 gem \"jekyll-rtd-theme\"이 글로번에 이미 선언되어 있어서 겹친것같다. 이를 주석처리하니깐 해결되었다.\n\n```\nsource \"https://rubygems.org\" # source \"https://gems.ruby-china.com\"\n\ngemspec\n\n# gem \"jekyll-rtd-theme\"\n\ngem \"github-pages\", group: :jekyll_plugins\n\ngem 'jekyll-admin', group: :jekyll_plugins\n```\n","dir":"/Errors/","name":"gem.md","path":"Errors/gem.md","url":"/Errors/gem.html"},{"permalink":"//","layout":"default","title":"Polynomeer’s blog","content":"# Polynomeer's blog\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"layout":"default","title":"TIL","content":"# TIL\n\nsource: `{{ page.path }}`\n\n## 2020.11.06\n\n### github.io 개설\n코드스쿼드의 알고리즘 추천 문제들을 풀어가다가 TIL의 필요성을 느껴서 시작하게 되었다. 그 작성 플랫폼으로는 github.io를 선택하였다.\n참고링크 : \n- https://dreamgonfly.github.io/blog/jekyll-remote-theme/\n- https://zoomkoding.github.io/gitblog/2019/08/15/git-blog-1.html\n\n### TIL 작성법\n- https://junwoo45.github.io/2019-09-10-til_%ED%9B%84%EA%B8%B0/\n- https://velog.io/@2ujin/%EB%82%B4-%EB%A7%98%EB%8C%80%EB%A1%9C-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-TIL-9sk5ujmvv7\n- https://wayhome25.github.io/til/2017/08/14/TIL-for-6-months/\n\n### Lv.1\n- [x] https://www.acmicpc.net/problem/1000\n- [x] https://www.acmicpc.net/problem/1008\n- [x] https://www.acmicpc.net/problem/2438\n- [x] https://www.acmicpc.net/problem/2920\n- [x] https://www.acmicpc.net/problem/8958\n- [x] https://www.acmicpc.net/problem/11654\n\n### 더 풀어보기 1\nsolved.ac\n- [] https://solved.ac/class/1\n- [] https://solved.ac/class/2\n\n### 더 풀어보기 2\n백준의 단계별로 풀어보기\n- [] https://www.acmicpc.net/step\n","dir":"/TIL/2020-TIL/","name":"2020-11-06-TIL.md","path":"TIL/2020-TIL/2020-11-06-TIL.md","url":"/TIL/2020-TIL/2020-11-06-TIL.html"},{"layout":"default","title":null,"content":"String.split() vs StringTokenizer\n\nhttps://sas-study.tistory.com/102\n\nJava Date, Time\n\nhttps://madplay.github.io/post/reasons-why-javas-date-and-calendar-was-bad\n\nhttps://coding-factory.tistory.com/259\n\nhttps://hyeonstorage.tistory.com/204\n\nhttps://docs.oracle.com/en/java/javase/15/docs/api/java.sql/java/sql/Date.html\n\nhttps://stackoverflow.com/questions/12067697/convert-current-date-to-integer\n\nHow to get hour, miniute in Java\n\nhttps://stackoverflow.com/questions/2654025/how-to-get-year-month-day-hours-minutes-seconds-and-milliseconds-of-the-cur\n\nhttps://stackoverflow.com/questions/8150155/java-gethours-getminutes-and-getseconds/8150681\n\nCalendar\n\nhttps://stackoverflow.com/questions/26962388/printing-a-calendar\n\nHow to get current time usinig Calendar in Java\n\nhttps://stackoverflow.com/questions/6055112/why-can-i-have-only-one-instance-of-calendar-object\n\n```java\nCalendar cal = Calendar.getInstance();\nCalendar cal2 = Calendar.getInstance();\nSystem.out.println(cal == cal2);\n```\n\nit's not singleton\n\nhttps://stackoverflow.com/questions/30842413/does-getinstance-denote-a-singleton-according-the-singleton-pattern/30842570\n\nhttps://stackabuse.com/how-to-get-current-date-and-time-in-java/\n\nDate refresh without create new instance\n\nhttps://stackoverflow.com/questions/21859981/java-date-that-refreshes/21860245\n\nHow to clear screen in Java\n\nhttps://lottoking.tistory.com/2387\n\nhttps://www.quora.com/How-do-I-clear-console-screen-CMD-screen-in-Java-Is-there-any-function-in-Java-like-clrscr-and-system-cls-in-C\n\nHow to initialize/fill 2d array with 0 in Java\n\nhttps://stackoverflow.com/questions/7118178/arrays-fill-with-multidimensional-array-in-java\n\nJava set color in console\n\nhttps://stackoverflow.com/questions/5762491/how-to-print-color-in-console-using-system-out-println\n\n\n\n### Map\n\nK,V 구조의 자료구조\n\nMap<String, Long> map = new HashMap<>();\n\n제너릭 타입에는 객체로 전달을 해야하므로 프리미티브 타입을 객체로 사용하려면 Wrapper클래스를 사용하면 된다.\n\nHashMap vs HashTable\n\nhttps://odol87.tistory.com/3\n\n\n\n### Wrapper Class\n\nLong x = 100L;\n\n변수 = 리터럴 상수\n\n자바 최신버전에서는 자동으로 오토박싱/언박식으로 자동 캐스팅을 해준다.\n\nhttps://m.blog.naver.com/PostView.nhn?blogId=clown7942&logNo=110120983491&proxyReferer=https:%2F%2Fwww.google.com%2F\n\nJava Optional\n\nhttp://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/\n\nnull 체크는 if문으로 체크하는 것보다 Optional을 이용하는것이 더 최신 feature\n\nKotlin은 Optional이 기본형이다 -> NullPointException이 예방된다.\n\n객체를 멤버값이아닌 주소값으로 정렬을 한다던가 가끔 사용하는 경우가 있다\n\n자바에서는 var보다 명확하게 타입을 적어주는 것이 좋다?\n\n\n\nProcess and Thread\n\n프로그램은 항상 파일이 있고, 사용자가 어떤 작업으로 하고 다시 파일로 저장\n\nCPU - Memory - SSD/HDD\n\nhttps://magi82.github.io/process-thread/\n\n\n\n하이퍼 스레딩\n\nhttps://www.intel.co.kr/content/www/kr/ko/gaming/resources/hyper-threading.html\n\n가상화\n\nhttps://kim-dragon.tistory.com/5\n\nSession, Connection, Transaction\n\nhttps://db.apache.org/derby/docs/10.12/devguide/cdevconcepts19173.html\n\nhttps://zhangyuhui.blog/2018/01/29/jpa-transaction-hibernate-session-jdbc-connection-and-db-transaction/\n\n","dir":"/TIL/2020-TIL/","name":"2020-11-17-TIL.md","path":"TIL/2020-TIL/2020-11-17-TIL.md","url":"/TIL/2020-TIL/2020-11-17-TIL.html"},{"layout":"default","title":null,"content":"입출력은 프로그램의 기본이다.\n\n운영체제는 마우스, 키보드로 입력받아서 모니터로 출력하고,\n\n표준 입력, 출력도 결국엔 파일이다. 그래서 리다이렉션으로 echo \"hello\" > a.txt 같은 명령이 가능한 것이다. 입력도 마찬가지로 java Test.java < input.txt 로 가능하다. 따라서 프로그램 작성시 입출력은 기본이다.\n\n입력장치 : 키보드, 마우스\n\n출력장치 : 모니터\n\nFile IO관련 API는 실제로 open, read, write, setpos, close의 과정을 거친다\n\n\n\n자바에서는 파일을 InputStream으로 읽어들인다. 파일 자체로는 읽을 수 있는 대상이 아니다. File 객체에서 \n\nThrows는 호출부에게 예외 처리를 맡긴다. Try ~ catch는 내가 직접 메소드 블록 내에서 처리코드를 구현한다. \n\nFileInputStream은 바이트 단위로 읽지만 음수표현 (-1)때문에 int로 리턴한다. byte단위로 가져오기 때문에 조작하기가 매우 까다롭다. 그래서 Character Streams가 조금 낫다.\n\n추상화가 많이 되면 될수록 핸들링은 어렵지만, 쓰기는 편하다.\n\nbos.close() 안하면 마지막 버퍼가 안 비워져서 값이 다 써지지 않는다.\n\nBufferedReader/BufferedWriter를 사용하는 것이 가장 성능이 좋으면서도 편리하다.\n\n자동차를 만드는게 아니라 (엔진, 타이어, 엑셀, 브레이크 포함)\n\n킥보드를 만드는게 낫다. 즉, 부품하나를 제대로 만드는 것보다 온전한 프로그램 하나를 완성하는것이 낫다.\n\n장류진 - 일의 기쁨과 슬픔\n\n문제 - 시계\n\n숫자야구\n\n\n\n- 기능에 따라 Parser, Validator, Tokenizer, ProcessRunner 이런 식으로 나누어 보겠습니다!\n- 네! 접근 제한자의 학습을 위해서 사용해보았습니다!\n- 생성자에 argument로 넘겨주는 방식을 사용하였는데, 이러한 방식이 주입이 맞는지 모르겠습니다. JavaShell 객체가 생성되면서 바로 main에서 생성된 Scanner 객체를 받아오는 방식으로 작성하였습니다.\n- clock 패키지의 메소드는 최대한 private로 변경하고, shell에서는 ClockRunner.runClock()메소드만 public으로 호출하는 방식으로 변경하였습니다.\n\n그러고 보니 항상 모각코 시간이 끝나고 체크아웃을 하면, 대부분 방에서 나가는데 계속 이어서 하는분도 계시잖아요? 그런데 혼자만 남으면 의미가 없어져서 나가게 되는 것 같아요. 하지만 다른 그룹에서 남아서 계속 하는 사람이 있다면 방을 합치는 것도 나쁘지 않을 것 같아요.\n\n### 홀짝게임\n\n1. 클래스 이름이 적절한지는 모르겠지만(이벤트에 따라 핸들링하는 것은 아니므로..), 적당한 이름이 도저히 떠오르지 않아서 일단 `Handler`로 명명하고 분리시켜 보았습니다.\n2. `Scanner`를 `betMoney`에서 생성하면 `main`에서의 `Scanner sc`와 이름은 같지만, 별도의 지역변수에 새로 생성한 `Scanner`가 저장되겠네요. 그리고 `sc.close()`를 해주지 않아서 문제가 되는군요. `main`에서 생성한 후, `Handler`에 주입하는 방식으로 수정했습니다. (3주차 미션에서 honux가 힌트로 준 방법을 사용했습니다.)\n3. 불필요한 `continue;` 였네요. 흐름상 문제가 없어서 제거했습니다!\n4. 삼항 연산자가 필요 없군요. 그렇게 수정했습니다.\n5. 이 부분은 쉽지 않네요. 객체 간의 메시지 패싱에 대해서는 좀 더 공부해야겠습니다. 조영호 님의 책도 열심히 읽으면서 이해하려고 노력 중입니다!\n6. `getter`, `setter` 사용하지 않는 부분은 지웠습니다.\n\n### 가계부\n\n1. '가계부 정보'가 무엇을 말하는지 모르겠어요! 혹시 현재는 남아있지 않은 .iml 파일인가요?\n2. DAO/DTO는 추후 확장성을 염두해두고 정한 클래스네임 입니다. DB를 추가하는 미션이 있을지 몰라서 그렇게 작성해둔 것입니다. 지금은 DAO/DTO라고 하기에는 좀 그렇죠. 혹시 제가 모르는 다른 특별한 의미가 있을까요?\n3. `public static boolean exitCode = false`에 대해서 말씀하신건가요? 일단, 이 변수는 사용자의 커맨드에 따라 전역적으로 실행 중지할 수 있도록 하기 위해서 선언하였습니다. 만약에 변하면 안되는 값이라면 final로 값을 고정해두어야합니다. 어떠한 메소드에 얼마나 중첩되어 있더라도 탈출하도록 하려다보니 static으로 저런 변수를 사용했는데, 우아한 방법이 떠오르질 않네요. 인자로 전달하는게 더 나으려나 모르겠네요.\n4. 인스턴스가 생성되지 않는다면 NullPointException이 일어날 수 있습니다. 따라서 생성자에서 초기화해주는 방식을 사용하도록 수정했습니다.\n5. 네, 일단 throws로 예외 처리를 상위 객체로 넘겨주는 방법으로 수정하였습니다.\n6. 변수없이 리턴하는게 깔끔해보이네요! 수정했습니다.\n7. \n8. TODO가 맞습니다 ;)\n9. equals를 사용해야하는데 실수를 했네요. 이런 실수를 절대 하면 안되는데 주의해야 겠습니다.\n10. 여러가지 기준에 대해 정렬하기 위해 compareTo만으로는 한계를 느껴서 Comparator 객체를 만드는 방법으로 수정해야겠습니다.\n11. 간결한 코드로 보이고자 하는 욕심(?)을 버리고, 블록으로 감싸는 것을 습관화해야 겠네요.\n12. 이 부분은 파일에서 sc.nextLint()으로 읽는데, 마지막 라인에서 개행이 있다면 NullPointException이 발생하여서 예외처리한 부분입니다.\n13. 네, 주석에도 달아놓았지만 프로그램 실행이 되는 동안에 변경사항이 반영되지 않아서 어쩔 수 없이 저렇게 작성하였습니다. DB를 사용했다면 저런 코드는 필요가 없겠지만요.\n14. 네, ledger로 변경했습니다.\n15. `continue`를 하는게 for each문에서 더 자연스러운 것 같네요. 저렇게 하면 중간에 만약에 null이 있더라도 끊어지지 않고 진행할 수 있겠네요.\n\n객체간의 메시지 패싱\n\nhttps://woowabros.github.io/study/2016/07/07/think_object_oriented.html\n\nScanner injection in Java\n\nhttps://stackoverflow.com/questions/21887928/using-a-scanner-across-multiple-classes-in-java\n\nhttps://stackoverflow.com/questions/34474045/is-there-any-way-i-can-use-a-scanner-object-in-a-different-class\n\nHandler\n\nhttps://www.quora.com/What-is-an-handler-in-programming\n\nDAO/DTO\n\nhttps://stackoverflow.com/questions/14366001/dto-and-dao-concepts-and-mvc\n\nhttps://stackoverflow.com/questions/35078383/what-are-the-dao-dto-and-service-layers-in-spring-framework\n\nhttps://velog.io/@emawlrdl/DAO%EC%99%80-DTO\n\n\n\n카카오 경력 공채\n\nhttps://encyphered.github.io/blog/note/2018/09/26/kakao-interview-review.html\n\n","dir":"/TIL/2020-TIL/","name":"2020-11-19-TIL.md","path":"TIL/2020-TIL/2020-11-19-TIL.md","url":"/TIL/2020-TIL/2020-11-19-TIL.html"},{"layout":"default","title":"2020.11.20 TIL","content":"# 2020.11.20 TIL\n\n재능은 몰라도 실력은 확실히 늘어가는 것이다. Problem Solving에서 모든 케이스에 대해 예외사항 없이 처리하는 능력도 실력에 해당된다. 나머지 케이스에 대해 모두 만족했다고 해도 하나라도 맞지 않으면 실력이 부족한 것이 맞다.\n\nArray initialze in Java\n\nhttps://www.baeldung.com/java-initialize-array\n\nSRP(Single Responsibility Principle)\n\nhttps://nesoy.github.io/articles/2017-12/SRP\n\nhttps://siyoon210.tistory.com/155\n\nhttps://sjh836.tistory.com/159\n\n1. 그냥 Game으로 바꾸었습니다.\n2. final을 붙여서 주입받은 객체를 보존할 수 있겠군요! 그렇게 수정해보았습니다.\n3. 아하~ 이제야 구체적으로 이해가 되네요! 객체를 받아서 처리하는 방식으로 변경했습니다.\n4. 원래 그렇게 되어있던 것을 제가 3번 부분을 잘못 이해해서 이상하게 바꾸었네요. ㅠ 그렇게 다시 변경했습니다.\n5. 최대한 메서드 별로 ''단일 책임''을 지도록 분리해보려고 노력했습니다. 로직이 없는 메서드(단순한 출력문만을 포함한 메서드)는 로직을 포함하는 단위로 묶었습니다.","dir":"/TIL/2020-TIL/","name":"2020-11-20-TIL.md","path":"TIL/2020-TIL/2020-11-20-TIL.md","url":"/TIL/2020-TIL/2020-11-20-TIL.html"},{"layout":"default","title":null,"content":"건축재료 -> 건축부품 -> 건축모듈 -> 건축시공\n\n컴퓨터 -> 운영체제 -> 라이브러리 -> 프레임워크 -> 애플리케이션\n\n디자인패턴 중에 컴포짓 패턴?\n\n파일도 하나의 디렉터리이다. 컨테이너도 하나의 컴포넌트이다.\n\n이벤트가 발생하면 이벤트 클래스에 대한 객체가 생성된다. 운영체제나 JVM이 해당 이벤트를 일단 가져간 다음 누구한테 전달해줄 지를 결정해주어야 한다. 핸들러 함수를 호출해야하는데, 이벤트 핸들러가 없으면 처리할 수 없다.\n\n클로저 현상 - 내부 함수에서 클래스 번수를 사용가능한 것\n\n이벤트 객체는 이벤트를 \n\n1. `toString()` 메서드의 목적은 정보를 문자화 시키는 것입니다. 특히 객체의 정보를 일정한 형식의 문자열로 표현하는 경우에 보다 **의미있는 출력**을 얻어낼 수 있을 것입니다. 예를 들어, 객체의 멤버를 `,` 로 구분하여 csv 포맷의 문자열로 얻어낼 수도 있고, json 포맷으로 얻어낼 수도 있을 것입니다. 이 프로젝트에서, 그리고 이 경우에는 굳이 `toString()`을 오버라이딩할 필요가 없다고 판단되어서 별도의 `getPlayer()`라는 메서드를 정의하였습니다.\n\n https://www.baeldung.com/java-tostring\n\n\n\n자바 인터페이스 / 추상클래스\n\nhttps://medium.com/webeveloper/%EC%9E%90%EB%B0%94-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4-6eecbe5d6350\n\n(책) 함께 자라기 - http://egloos.zum.com/agile/v/5914591","dir":"/TIL/2020-TIL/","name":"2020-11-24-TIL.md","path":"TIL/2020-TIL/2020-11-24-TIL.md","url":"/TIL/2020-TIL/2020-11-24-TIL.html"},{"layout":"default","title":"2020.11.25 TIL","content":"# 2020.11.25 TIL\n\n## 그림판 만들기\n\nMouseListener / MouseMotionListener\n\nhttps://m.blog.naver.com/PostView.nhn?blogId=rain483&logNo=220736830546&proxyReferer=https:%2F%2Fwww.google.com%2F\n\nDraw line in Java\n\nhttps://devblog.tistory.com/entry/Java-%EC%9E%90%EB%B0%94-Graphics-%EB%A7%88%EC%9A%B0%EC%8A%A4%EB%A1%9C-%EC%84%A0%EA%B7%B8%EB%A6%AC%EA%B8%B0-%EC%86%8C%EC%8A%A4%EC%98%88%EC%A0%9C\n\nhttps://docs.oracle.com/javase/7/docs/api/java/awt/event/MouseEvent.html\n\nJava Game Engine\n\nhttps://stackoverflow.com/questions/7563904/java-rpg-useful-tools\n\nhttp://slick.ninjacave.com/wiki/index.php?title=Main_Page\n\nHow to get SystemColor in Java?\n\nhttps://www.programcreek.com/java-api-examples/?api=java.awt.SystemColor\n\nHow to save image in AWT?\n\nhttps://stackoverflow.com/questions/4725320/how-to-save-window-contents-as-an-image\n\nAWT menu bar control\n\nhttps://www.tutorialspoint.com/awt/awt_menubar_control.htm\n\nVO vs DTO\n\nhttps://ijbgo.tistory.com/9","dir":"/TIL/2020-TIL/","name":"2020-11-25-TIL.md","path":"TIL/2020-TIL/2020-11-25-TIL.md","url":"/TIL/2020-TIL/2020-11-25-TIL.html"},{"layout":"default","title":"2020.11.26 TIL","content":"# 2020.11.26 TIL\n\npaint() vs repaint()\n\npaint는 콜백함수라서 JVM이 이벤트에 따라서 자동으로 호출해준다. 하지만 repaint는 내가 직접 호출하는 메소드이다.\n\npublic 메소드는 외부에서 사용하는 메서드이므로 보통은 더 상위에 작성한다.\n\nmain thread 는 main method를 실행한다. thread.start()는 thread.run()을 실행한다.\n\nfinally는 무조건 실행되므로 조심해야한다!!!\n\n프로그램은 스레드를 메서드 단위로 실행시킨다.\n\n스레드에서 static변수는 스레드 간에 공유가되고, 그냥 변수는 스레드 별로 존재한다\n\n공유자원에 접근하고 lock/unlock하는데에 시간이 훨씬 더 걸린다\n\n덧셈을 하나의 종이에 두명이 번갈아 가면서 더하는것보다 종이 두개에 두명이 각자 계산해서 더하는게 빠르다\n\n현재는 스레드를 직접 프로그래밍 하지않고 좀 더 추상화된 단계인 테스크를 쓴다\n\nPC는 스레드마다, 힙도 스레드간 공유가능, 스택은 공유 안됨 -> 스택프레임이 스레드별로 쌓임\n\nhttps://mkyong.com/java/how-to-compare-dates-in-java/\n\nNoSuchElementException\n\nhttps://stackoverrun.com/ko/q/12796403\n\n## 가계부 프로젝트\n\nException in thread \"main\" java.util.NoSuchElementException\n\nnext()가 \n\nhttps://sourceforge.net/projects/javaledger/\n\nCan't load IA 32-bit .dll on a AMD 64-bit platform\n\nhttps://huammmm1.tistory.com/445\n\n\n\nhttps://goddaehee.tistory.com/184\n\n\n\n\n\n### 프로그래머로 취업할 때 자신을 어필하는 방법\n\n- 테스트코드를 잘 작성했는가?\n- 문서화가 잘 되어있는가? (개요, 빌드 및 실행 방법) -> 사려깊게 친절하게 작성하기\n- JAVA 최신 버전의 새로운 기능, LTS의 의미 등 메인 언어에 대한 기본적인 지식\n- 책을 번역하거나 책을 쓰거나 컨퍼런스에 참여하는 등의 스펙은 무조건 플러스\n- 스프링을 많이 알아서 취직이 되는것이 아니다. 스프링을 빨리 학습할 수 있는 능력이 더 중요\n- 스프링 API를 외우는 것이 중요한게 아니라, 메타학습이 중요!\n- IOC개념, DI개념, AOP가 어떻게 구현되었는가, 다이나믹 프록시? 프록시 패턴?\n- http servlet을 스프링이 어떻게 추상화 시켜놓았는지\n- 깃허브에서 오픈소스 프로젝트에 기여, 만들기 등\n- Hacktoberfest등에 참여하는 방법\n- 지지를 받고 있는 오픈소스에 툴이나 라이브러리를 만들었다는 것은 좋다\n- 취직을 하기위해서 책을 번역하거나 하진 않는것이 좋다. 학습을 위해서 번역하거나 스터디를 하거나 발표를 하거나 오픈소스 기여를 하는 것이 바람직하다.\n- 얼마나 꼼꼼한가? 얼마나 논리적으로 사고하는가? 얼마나 문제해결능력이 있는가? 소프트웨어 개발역량, 기본소양이 갖추어졌는가?\n- 그것들을 좋아한다면 결국 직업으로 삼았을때 행복감을 얻을 수 있을것이다.","dir":"/TIL/2020-TIL/","name":"2020-11-26-TIL.md","path":"TIL/2020-TIL/2020-11-26-TIL.md","url":"/TIL/2020-TIL/2020-11-26-TIL.html"},{"layout":"default","title":null,"content":"만화로 쉽게 배우는 CPU  비전공인데 컴구조를 배운 적이 없다면 꼭 읽어 봅시다. 추천!  ### 실습과 그림으로 배우는 리눅스 구조  리눅스와 OS에 대해 알 수 있는 좋은 책 추천!  ### 리눅스 커널 내부구조 (백승제, 최종무 공저)  리눅스 커널을 맛 볼 수 있는 좋은 책. 나름 쉬운 편입니다. C언어에 대한 기초적 이해가 필요합니다.\n\n\n\nLong to Int in Java\n\nhttps://www.javatpoint.com/java-long-to-int\n\nString compare by length\n\nhttps://stackoverrun.com/ko/q/9888287\n\nLeetCode - Merge Two Sorted Lists (in Java)\n\nhttps://www.programcreek.com/2012/12/leetcode-merge-two-sorted-lists-java/\n\n[Runtime Error]\n\n```\njava.lang.NoSuchMethodError: 'ListNode ListNode.deserialize(java.lang.String)'\n\tat __Deserializer__.toListNode(Unknown Source)\n\tat line 80, __Driver__.main\n```\n\nListNode는 LeetCode 사이트의 채점 프로그램에서 내장하고 있으므로 주석을 풀면 안된다. 내부적으로 ListNode.deseialize() 메서드를 구현하고 있는데, ListNode를 덮어써버림으로써 원래의 메서드를 불러오지 못해서 발생하는 에러이다.\n\nhttps://leetcode.com/discuss/general-discussion/315573/runtime-error-while-running-code-in-leetcode\n\n\n\n자유 프로젝트\n\n- 패스트 푸드점 주문시스템\n- 연도별, 월별 가계부","dir":"/TIL/2020-TIL/","name":"2020-11-27-TIL.md","path":"TIL/2020-TIL/2020-11-27-TIL.md","url":"/TIL/2020-TIL/2020-11-27-TIL.html"},{"layout":"default","title":"2020.11.28 TIL","content":"# 2020.11.28 TIL\n\nHow to migrate to intellij from netbeans?\n\nhttps://www.javatpoint.com/intellij-idea-migrating-from-netbeans\n\nhttps://www.tutorialspoint.com/intellij_idea/intellij_idea_migrating_from_netbeans.htm\n\nHow to add external libraries in IntelliJ?\n\nhttps://goddaehee.tistory.com/243\n\nHow to user password fields\n\nhttps://docs.oracle.com/javase/tutorial/uiswing/components/passwordfield.html\n\nSwing Layout\n\nhttps://kamang-it.tistory.com/entry/Swing-04Layout%EB%B0%B0%EC%B9%98%EA%B4%80%EB%A6%AC%EC%9E%90\n\nbutton\n\n\n\n문제점1. SignUp 생성자는 매개변수로 Window를 전달받는데, SignUp 버튼의 ActionListener는 LogIn클래스의 signBtn.addActionListener메서드 안에 정의된 **로컬 클래스**이다. 따라서 this 키워드로 생성자를 호출하면 내부 클래스인 ActionListener가 참조된다.\n\n```\njava.lang.Object\n\tjava.awt.Component\n\t\tjava.awt.Container\n\t\t\tjava.awt.Window\n\t\t\t\tjava.awt.Frame\n\t\t\t\t\tjavax.swing.JFrame\n```\n\nJFrame은 Window 객체를 상속한다. 따라서 JFrame을 상속하는 LogIn객체를 직접 넘겨줄 방법을 찾아야한다.\n\n```java\n signBtn.addActionListener(new ActionListener() {\n @Override\n public void actionPerformed(ActionEvent e) {\n SignUp signUp = new SignUp(LogIn, txtID);\n \tSignUp signUp = new SignUp(this, txtID);\n signUp.setVisible(true);\n }\n });\n```\n\n위와 같은 방법으로는 LogIn객체를 직접 참조할수가 없다.\n\n\n\n해결1. JFrame 객체를 생성해서 SignUp생성자로 전달\n\n```java\npublic class LogIn {\n\tprivate JFrame frame;\n private JButton signBtn;\n \n\tpublic LogIn() {\t\t\t\t\t\n frame = new JFrame();\t\t// 생성자에서 JFrame 객체 생성\n\t\tsignBtn = new JButton();\n \n signBtn.addActionListener(new ActionListener() {\n @Override\n public void actionPerformed(ActionEvent e) {\n \t// SignUp 생성자에 JFrame 객체를 전달\n \tSignUp signUp = new SignUp(frame, txtID);\n signUp.setVisible(true);\n }\n });\n }\n \n}\n```\n\nthis 를 넣으면 ActionListener가 전달되고, LogIn을 넣으면 아직 생성되기 전이라서 호출이 불가능하다. 따라서 extends JFrame을 하지않고, 클래스변수로 Frame을 선언하고 생성자에서 미리 생성하면 버튼 액션 리스너로 Frame을 전달할 수 있다.\n\n해결2. 중첩 클래스에서 바깥 클래스 참조 얻기\n\n ```java\npublic class LogIn extends JFrame { // JFrame을 상속하는 클래스\n\tprivate JFrame frame;\n private JButton signBtn;\n \n\tpublic LogIn() {\t\t\t\t\t\n frame = new JFrame();\t\t// 생성자에서 frame 인스턴스 생성\n\t\tsignBtn = new JButton(); \n \n signBtn.addActionListener(new ActionListener() {\n @Override\n public void actionPerformed(ActionEvent e) {\n \t// SignUp 생성자에 외부 객체의 참조값을 전달\n SignUp signUp = new SignUp(LogIn.this, txtID);\n signUp.setVisible(true);\n }\n });\n }\n}\n\t\n ```\n\n굳이 frame을 생성하고 전달하는 방식으로 구현하지 않고, `class LogIn extends JFrame`으로 선언하여도 된다. 중첩 클래스의 내부 클래스에서 this키워드로 객체를 참조하면 ActionListener가 참조된다. 하지만 외부클래스인 LogIn을 참조하기 위해서는 `LogIn.this`로 참조하면 된다.\n\n\n\nhttps://stackoverflow.com/questions/20252727/is-not-an-enclosing-class-java","dir":"/TIL/2020-TIL/","name":"2020-11-28-TIL.md","path":"TIL/2020-TIL/2020-11-28-TIL.md","url":"/TIL/2020-TIL/2020-11-28-TIL.html"},{"layout":"default","title":"2020.11.30 TIL","content":"# 2020.11.30 TIL\n\n## Swing Layout\n\n자바 스윙에서는 기본으로 제공하는 레이아웃이 많이 없다. 그리고 원하는 배치가 한번에 되지 않을 가능성이 매우 높다. (대표적인 예로 여백의 미가 없다) 따라서 레이아웃을 원하는 방식으로 배치하기 위해서는 패널에 패널을 add하고, 또 패널에 또 다른 패널을 add 하고, ... 이렇게 반복하여 배치하는 방법이 있다. 이렇게 하면 장점으로는 Resizable한 상태일때 약간의 반응형 디자인이 가능하다는 점이다. 하지만 자바 스윙에서 그런부분까지 고려하여 디자인을 하기에는 너무나도 까다롭다.\n\n두번째 방법으로는 수동으로 레이아웃을 배치하는 방법이다. 이때에는 원하는 위치에 원하는 사이즈로 정확히 배치할 수 있다. 이렇게 배치를 할 때는 Frame.setLayout(null)로 먼저 배치관리자의 사용을 해제 해주어야 한다.\n\nhttps://okky.kr/article/324559\n\nhttps://blog.naver.com/jmszzzzz/10178215384\n\nhttps://stackoverrun.com/ko/q/10465005\n\nhttps://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html\n\nhttps://stackoverflow.com/questions/4727486/java-swing-a-problem-using-layout-managers\n\nhttps://stackoverflow.com/questions/33576358/how-to-use-java-swing-layout-manager-to-make-this-gui\n\n\n\nSwing Tab\n\nhttps://smilekimna.tistory.com/entry/Swing-Tab-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\n\nhttps://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html\n\nhttps://m.blog.naver.com/PostView.nhn?blogId=battledocho&logNo=220012077952&proxyReferer=https:%2F%2Fwww.google.com%2F\n\n\n\nHow to set a transparant background in Java Swing\n\nhttps://stackoverflow.com/questions/2545214/how-to-set-a-transparent-background-of-jpanel\n\nHow to remvoe title bar in Java Swing\n\nhttps://stackoverflow.com/questions/8701716/how-to-remove-title-bar-in-jframe/8701948\n\ngetContentPane().setBackgroundColor() does not working\n\nhttps://stackoverflow.com/questions/26810323/getcontentpane-setbackground-doesnt-seem-to-work\n\nJFrame.setBackGroundColor() does not working\n\nhttps://stackoverflow.com/questions/2742270/jframe-setbackground-not-working-why\n\nLogIn 클래스에서는 getContentPane().setBackground()이 순간적으로 보였다가 덮어써진다. JPanel에 또 다른 JPanel 두 개를 넣어서 JFrame에 add하는 형태로 작성하였는데, 그냥 JPanel.setBackground()로 일일이 바꿔주는 방식으로 구현하였다.\n\nHow to use color chooser\n\nhttps://docs.oracle.com/javase/tutorial/uiswing/components/colorchooser.html\n\nChange ActionListener interface to lambda expression\n\nhttps://www.codejava.net/java-core/the-java-language/java-8-lambda-listener-example\n\nHow to get Enter key in Java Swing\n\nhttps://stackoverflow.com/questions/13731710/allowing-the-enter-key-to-press-the-submit-button-as-opposed-to-only-using-mo\n\nhttps://www.tutorialspoint.com/swing/swing_key_listener.htm\n\nKeyListener not working\n\nhttps://stackoverflow.com/questions/16530775/keylistener-not-working-for-jpanel\n\nKeyListener를 구현하여 재정의된 keyPressed메서드에서 엔터키를 받아오는 방법을 사용하려 했으나, 텍스트 필드에 글을 입력하면 포커스가 벗어나게 되어 키입력을 인식하지 못하는문제가 있었다. 또 다른 글에서는 엔터키 입력 시 기본으로 동작할 버튼하나만 지정하는 경우에 구태여 KeyListener를 구현할 필요가 없다고 설명한다.\n\nhttps://stackoverflow.com/questions/31748578/add-a-keylistener-in-my-login-jpanel\n\n\n\n가계부 템플릿\n\nhttp://kimjmin.net/2016/12/dmitri-account-book-2017/\n\nhttps://docs.google.com/spreadsheets/d/1y626Oq27d7TxB28KNRMmAxQs7AS56lHc-PJ1JsCrWyI/edit#gid=0\n\n\n\nGoogle Map API\n\n```\nThe Google Maps Platform server rejected your request. You must use an API key to authenticate each request to Google Maps Platform APIs. For additional information, please refer to http://g.co/dev/maps-no-account\n```\n\nhttps://developers.google.com/maps/documentation/maps-static/get-api-key\n\n```\nThe Google Maps Platform server rejected your request. This API project is not authorized to use this API.\n```\n\nhttps://stackoverflow.com/questions/19408066/the-google-maps-api-server-rejected-your-request\n\n```\nThe Google Maps Platform server rejected your request. You must enable Billing on the Google Cloud Project at https://console.cloud.google.com/project/_/billing/enable Learn more at https://developers.google.com/maps/gmp-get-started\n```","dir":"/TIL/2020-TIL/","name":"2020-11-30-TIL.md","path":"TIL/2020-TIL/2020-11-30-TIL.md","url":"/TIL/2020-TIL/2020-11-30-TIL.html"},{"layout":"default","title":"2020.12.01 TIL","content":"# 2020.12.01 TIL\n\nWhat is the difference between JFrame and JDialog?\n\nhttps://stackoverflow.com/questions/5552833/what-is-the-difference-between-a-jframe-and-a-jdialog\n\n\n\ndispose() vs JFrame.EXIT_ON_CLOSE\n\nhttps://stackoverflow.com/questions/30889542/dispose-vs-setdefaultcloseoperationjframe-exit-on-close\n\n\n\nJava Swing calendar\n\nhttps://stackoverflow.com/questions/27584520/how-to-create-a-calendar-week-view-component-in-swing\n\nhttps://dzone.com/articles/mig-calendar-v66-released\n\nhttp://www.migcalendar.com/\n\n\n\n### Add custom sound in macOS\n\nhttps://discussions.apple.com/thread/250270370\n\nhttps://discussions.apple.com/thread/6692301\n\nhttps://www.youtube.com/watch?v=Zln-AdG5ark\n\nhttps://www.youtube.com/watch?v=fGkp5MzA3R4\n\n\n\nOperation not permitted\n\nhttps://stackoverflow.com/questions/32659348/operation-not-permitted-when-on-root-el-capitan-rootless-disabled\n\nUser root in macOS\n\nhttps://hun0345.tistory.com/111\n\nChange kakaotalk notification sound to custom sound\n\nhttps://macnews.tistory.com/2541\n\n\n\n\n\nhttps://superuser.com/questions/1495124/read-only-file-system-when-i-try-to-touch-in-mac-os-catalina\n\n ```\n /System/Library/PrivateFrameworks/ToneLibrary.framework/Versions/A/Resources/AlertTones/Modern  su root  1 ↵  1877  17:30:03\nPassword:\nsh-3.2# cp /Users/ham/Desktop/ReceivedMessage.m4r .\ncp: ./ReceivedMessage.m4r: Read-only file system\nsh-3.2# mount -uw .\nmount: unknown special file or file system ..\nsh-3.2# mount -uw /\nsh-3.2# cp /Users/ham/Desktop/ReceivedMessage.m4r .\nsh-3.2#\n ```","dir":"/TIL/2020-TIL/","name":"2020-12-01-TIL.md","path":"TIL/2020-TIL/2020-12-01-TIL.md","url":"/TIL/2020-TIL/2020-12-01-TIL.html"},{"layout":"default","title":"2020.12.03 TIL","content":"# 2020.12.03 TIL\n\nConnect mysql to JDBC\n\nhttps://hyeonstorage.tistory.com/110\n\nhttps://allg.tistory.com/20\n\nhttps://lottogame.tistory.com/3686\n\nhttps://m.blog.naver.com/pjok1122/221727915740\n\nhttps://butgrin.tistory.com/70\n\n\n\nhttps://zetawiki.com/wiki/MySQL_%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC_my.cnf\n\nhttps://blog.naver.com/wizardkyn/220852348757\n\nMySQL TImeZone problem\n\nhttps://yenaworldblog.wordpress.com/2018/01/24/java-mysql-%EC%97%B0%EB%8F%99%EC%8B%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%97%90%EB%9F%AC-%EB%AA%A8%EC%9D%8C/\n\nhttps://coloceum.tistory.com/entry/Mysql-timezone-%EB%B3%80%EA%B2%BD\n\nhttps://devuna.tistory.com/47\n\n\n\njava.sql.SQLException: Before start of result set\n\nhttps://brocess.tistory.com/108\n\n로그인 프로세스에서 ResultSet에 대한 null 체크과정과 로그인 시도할 때 마다 User Bean 객체의 초기화가 필요하다.\n\n\n\n```\n{\"2020-11-11\", \"Food\", \"Pizza\", \"Seoul\", 0, 8000, 0},\n{\"2020-11-24\", \"Beverage\", \"Coffee\", \"Seoul\", 0, 5000, 0},\n{\"2020-11-30\", \"Public\", \"Mobile Phone fee\", \"Seoul\", 0, 2000000, 0},\n{\"2020-11-30\", \"Financial\", \"Insurance premium\", \"Seoul\", 0, 300000, 0},\n{\"2020-11-25\", \"Service\", \"Mac A/S\", \"Seoul\", 0, 12000, 0},\n{\"2020-11-30\", \"Medical\", \"Dental care\", \"Dongtan\", 0, 45000, 0},\n{\"2020-11-30\", \"Income\", \"Nov salary\", \"Seoul\", 10000000, 0, 0},\n{\"2020-12-01\", \"Clothes\", \"A.P.C shirt\", \"Daegu\", 0, 185000, 0},\n{\"2020-12-07\", \"Hobby\", \"Steam game\", \"Daegu\", 0, 36000, 0},\n{\"2020-12-12\", \"Business\", \"Meeting expenses\", \"Busan\", 0, 12000, 0},\n{\"2020-12-17\", \"Study\", \"Online study\", \"Daegu\", 0, 330000, 0},\n{\"2020-12-24\", \"Vehicle\", \"Fuel\", \"Busan\", 0, 60000, 0},\n{\"2020-12-24\", \"Etc\", \"Lost wallet\", \"Busan\", 0, 100000, 0}\n```\n\njava.awt.IllegalComponentStateException: component must be showing on the screen to determine its location\n\n\n\n\n\nINSERT INTO ledger (uid, date, method, type, item, description, location, credit, debit, balance) VALUES (1, '2020-11-25', 'Cash', 'Food', 'Tomato', null, 'Seoul', 0, 5200, 0)\n\n\n\nHow to get selected row in JTable?\n\nhttps://stackoverflow.com/questions/29345792/java-jtable-getting-the-data-of-the-selected-row\n\nTo get multiple selected rows in JTable\n\nhttps://stackoverflow.com/questions/37795073/get-selected-rows-in-jtable/37795497\n\nhttp://www.java2s.com/Code/JavaAPI/javax.swing/JTablegetSelectedRows.htm\n\njava.sql.SQLEscption: Can not issue data manipulation statements with executequery()\n\nSELECT를 제외한 나머지 쿼리문은 리턴값으로 int의 값을 반환하는 executeUpdate() 사용해야 한다.\n\nHow to hide column in JTable?\n\nhttps://stackoverflow.com/questions/1492217/how-to-make-a-columns-in-jtable-invisible-for-swing-java/1493233\n\nJava Calendar\n\nhttps://dzone.com/articles/mig-calendar-v66-released#","dir":"/TIL/2020-TIL/","name":"2020-12-03-TIL.md","path":"TIL/2020-TIL/2020-12-03-TIL.md","url":"/TIL/2020-TIL/2020-12-03-TIL.html"},{"layout":"default","title":null,"content":"진정한 개발자라면 에러메시지가 있는 것에 대해 감사하게 생각해야한다. 왜냐하면 에러메시지조차 없다면 문제가 있을때 그 원인을 찾을 단서조차 없는것과 마찬가지이기 때문에다.\n\n\n\n \t \t B B B \n \t \t B B B \n \t \t \t B B B \n \n W W W O O O G G G Y Y Y \n W W W O O O G G G Y Y Y \n W W W O O O G G G Y Y Y\n \n \t\t\t\t\t\t\t\t R R R \n \t R R R \n \t\tR R R \n\n초기상태 : BRF2F\n\n```\n B B G \n B B O \n B B O \n\nO O O G G R Y Y Y B W W \nW W W O O R G G G B Y Y \nO O R G G G B Y Y W W W \n\n \t\t\t\t\t\t R R W \n \t R R Y \n \t R R Y \n```\n\nCUBE> F'F'F'R'B'\n\n```\nF'\n B B G \n B B O \n B B O \n\nO O O G G R Y Y Y B W W \nW W W O O R G G G B Y Y \nG G G B Y Y W W W O O R \n\n R R W \n R R Y \n R R Y \n\nF'\n B B G \n B B O \n B B O \n\nO O O G G R Y Y Y B W W \nW W W O O R G G G B Y Y \nB Y Y W W W O O R G G G \n\n R R W \n R R Y \n R R Y \n\nF'\n B B G \n B B O \n B B O \n\nO O O G G R Y Y Y B W W \nW W W O O R G G G B Y Y \nW W W O O R G G G B Y Y \n\n R R W \n R R Y \n R R Y \n\nR'\n B B B \n B B B \n B B B \n\nO O O G G G Y Y Y W W W \nW W W O O O G G G Y Y Y \nW W W O O O G G G Y Y Y \n\n R R R \n R R R \n R R R \n\nB'\n B B B \n B B B \n B B B \n\nW W W O O O G G G Y Y Y \nW W W O O O G G G Y Y Y \nW W W O O O G G G Y Y Y \n\n R R R \n R R R \n R R R \n\n축하합니다!!! 정답입니다!!!\n\n경과시간: 01:08\n조작갯수: 5\n이용해주셔서 감사합니다. 뚜뚜뚜.\n```\n\n\n\nFF'RR'UU'BB'LL'DD'F2R2U2B2L2D2\n\nR'DDU'B2R2B2F'D2B'B\n\nB'BD'D'FB'B'R'R'B'B'UD'D'R\n\nDL'D2RD'\n\nDR'D'D'LD'","dir":"/TIL/2020-TIL/","name":"2020-12-09-TIL.md","path":"TIL/2020-TIL/2020-12-09-TIL.md","url":"/TIL/2020-TIL/2020-12-09-TIL.html"},{"layout":"default","title":null,"content":"```\nVue packages version mismatch:\n\n- vue@2.6.12\n- vue-template-compiler@2.5.17\n\nThis may cause things to work incorrectly. Make sure to use the same version for both.\nIf you are using vue-loader@>=10.0, simply update vue-template-compiler.\nIf you are using vue-loader@<10.0 or vueify, re-installing vue-loader/vueify should bump vue-template-compiler to the latest.\n\n at Object.<anonymous> (/Users/ham/Desktop/Projects/ProofU/frontend/node_modules/vue-template-compiler/index.js:8:9)\n at Module._compile (internal/modules/cjs/loader.js:1128:30)\n at Object.Module._extensions..js (internal/modules/cjs/loader.js:1167:10)\n at Module.load (internal/modules/cjs/loader.js:983:32)\n at Function.Module._load (internal/modules/cjs/loader.js:891:14)\n at Module.require (internal/modules/cjs/loader.js:1023:19)\n at require (internal/modules/cjs/helpers.js:72:18)\n at Object.<anonymous> (/Users/ham/Desktop/Projects/ProofU/frontend/node_modules/vue-loader/lib/parser.js:1:18)\n at Module._compile (internal/modules/cjs/loader.js:1128:30)\n at Object.Module._extensions..js (internal/modules/cjs/loader.js:1167:10)\n @ ./src/router/index.js 13:0-50\n @ ./src/main.js\n @ multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server ./src/main.js\n\n```\n\nnpm update vue-template-compiler\n\nhttps://yunzema.tistory.com/82","dir":"/TIL/2020-TIL/","name":"2020-12-19-TIL.md","path":"TIL/2020-TIL/2020-12-19-TIL.md","url":"/TIL/2020-TIL/2020-12-19-TIL.html"},{"layout":"default","title":"Dion Quiz","content":"### Dion Quiz\n\n1. 접근 제한자를 언제 써야할까요? 왜 상태를 나타내는 변수는 private을 사용할까요? 이를 통해서 얻는 이점은 무엇일까요?\n\n접근 제한자(한정자)는 캡슐화와 정보은닉을 구현할 수 있도록 해줍니다. 즉, 클래스 외부(사용자)에서는 내부 접근을 허용하지 않기 위해서입니다.\n\n상태를 나타내는 변수는 정상적이지 않은 값으로 변경되면 안 되므로, 외부에서 함부로 접근하지 못하도록 private으로 접근을 제한합니다. 대신에 Getter를 통해서 값을 얻도록 읽기 권한만 허용할 수도 있고, Setter에서 값을 검증하여 사용자의 입력을 안정적으로 얻어낼 수 있습니다. \n\n외부 사용자는 해당 클래스에 정의된 내부 메소드를 통해서 접근하므로 데이터 보호가 가능합니다. (정보 은닉) 또한, 객체의 수정사항이 필요할 때 기능별로 모듈처럼 수정하면 외부에서는 별도의 코드 수정 없이 사용 가능합니다. (유지 보수의 용이) 마지막으로, 내부 동작의 이해가 필요 없이 해당 메소드를 호출하면 된다는 점에서 사용자의 편의성도 제공해줄 수 있습니다. \n\n2. static은 언제 써야할까요? static을 어떻게하면 적게쓰면서 코딩을 할 수 있을까요? 왜 static을 많이쓰지 말라고 할까요?\n\nstatic 키워드는 static 변수나 static 메소드를 선언할 때 사용합니다. 객체마다 가지고 있어야 할 데이터라면 인스턴스 필드로 선언하면 되지만, 객체마다 가지고 있을 필요성이 없는 공용적인 데이터라면 static 필드로 선언하는 것이 좋습니다.\n\n메소드의 경우에는 인스턴스 필드를 이용해서 실행해야 한다면 인스턴스 메소드로 선언하면 되지만, static 변수를 사용한다면 반드시 static으로 선언해야 합니다. 이는 메모리에 로드되는 시점을 따져보면 당연합니다.\n\n반드시 모든 인스턴스에서 공유해야 하고, 메모리상에 단 한 번만 로드되어야 하는 경우가 아니라면, 다른 방식으로 선언하는 것이 바람직합니다. 그렇게 하기 위해서는 클래스의 메소드를 통해서, 메소드의 매개변수를 통해서 데이터를 주고받을 수 있도록, 클래스와 메소드를 잘 설계해야 합니다.\n\nstatic 키워드가 붙으면 메모리의 스태틱 영역에 저장되어 Garbage Collector의 관리 영역(Heap 영역)을 벗어납니다. 따라서 프로그램의 종료 시까지 메모리에 할당된 채로 유지되므로, 너무 자주 사용하게 되면 메모리의 낭비와 시스템 성능에 안 좋은 영향을 줄 수 있습니다.\n\n3. FileWriter와 BufferedWriter의 차이는 무엇이며, 두 클래스 중 무엇을 File IO에 사용하였나요? 그 이유는 무엇인가요?\n\nFileWriter와 BufferedWriter는 성능의 차이가 있습니다. 이 성능의 차이는 버퍼의 크기 차이에서 발생합니다. 즉, FileWriter가 사용하는 버퍼의 기본 크기는 작은데, 이에 비해 BufferedWriter가 사용하는 버퍼의 크기는 충분히 큽니다. 통상적으로 100KB 이상의 데이터를 써야 하는 경우에는 BufferedWriter를 사용하는 것이 더 효율적입니다. (실제로, BuffereWriter는 **문자 8,192개를 저장할 수 있는 버퍼의 크기**를 가집니다.)\n\nBufferedWriter bw = new BufferedWriter(new FileWriter(\"./data.txt\", false));\n\n따라서, 이처럼 FileWriter로 File객체를 받아오고, BufferedWriter로 File IO를 수행하였습니다.\n\nhttps://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/io/FileWriter.html\n\nhttps://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/io/BufferedWriter.html\n\nhttps://www.programiz.com/java-programming/filewriter\n\nhttps://www.programiz.com/java-programming/bufferedwriter\n\nhttps://bcho.tistory.com/288\n\nhttps://stackoverflow.com/questions/12350248/java-difference-between-filewriter-and-bufferedwriter\n\n### try-catch-resource\n\nhttps://vmpo.tistory.com/entry/java-try-catch-with-resources-%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC\n\nhttps://mangkyu.tistory.com/47\n\nhttps://velog.io/@gillog/Java-%EC%A0%91%EA%B7%BC-%EC%A0%9C%ED%95%9C%EC%9E%90\n\nhttps://gyrfalcon.tistory.com/entry/JAVA-%EC%A0%91%EA%B7%BC-%EC%A0%9C%ED%95%9C%EC%9E%90\n\n\n\n\n\n\n\n1.\n\n'외부 사용자'는 어떤 블로그를 참고하다가 인용하게 된 표현인데, 저는 import 해서 사용하는 개발자들을 포함하는 말로 사용한 것인데, 혼동이 있었다면 그냥 '클래스 외부'라고만 표현하는 게 낫겠네요!\n\n상태 값을 갖는 객체에 직접적인 접근을 하여 그 상태 값에 대해 로직을 수행하는 경우가 있는데, 그러한 경우 private로 선언했다고 하더라도 무분별한 getter의 사용은 옳지 않습니다. 좀 더 객체 지향적으로 생각해보면 그냥 상태 값을 가져오는(getter를 통해서) 것이 아니라, 상태 값을 '어떻게' 가져올지에 대한 메소드를 정의해놓고 그것을 통해서만 접근하는 것이 더욱 안전하고, 다른 객체와 메시지를 주고받을 때 객체 지향적인 프로그래밍이 가능해집니다.\n\nhttps://woowacourse.github.io/javable/2020-04-28/ask-instead-of-getter\n\n2.\n\nstatic final은 수학에서의 파이와 같은 불변의 값, 상수(constant)를 저장할 때 사용합니다. static의 대표적인 특징은 프로그램상에서 단 하나만 할당된다는 것인데, final은 한 번 초깃값이 저장되면 변경할 수 없습니다. 따라서 한 번 저장되어 바뀔 필요가 없는 final 상수는 static으로 하나만 존재하는 것이 자연스러운 것입니다. 그렇기 때문에 static final은 자바에서 상수를 선언할 때 일반적인 표현입니다.\n\nstatic 메소드는 인스턴스 없이 호출이 가능하며 (인스턴스에서 호출이 불가능), 유틸리티 함수를 만드는 데 유용합니다. 유틸리티 함수란 Math.max(), Math.min()처럼 여러 가지 계산과 처리를 대신에 해주는 라이브러리 함수들을 의미합니다. 그리고 내부 로직이 크게 **변경될 일이 없는** 메소드를 의미합니다. 사용이 적절한 구체적인 사례는 아래와 같습니다.\n\n- 이처럼 일반적으로 인스턴스가 생성되기도 이전에 호출되어야 하거나 다른 인스턴스의 생성에 의존하지 않는 경우\n- 인스턴스 변수를 사용하지 않는 경우\n- 모든 인스턴스 메소드 간에 쉽게 공유될 수 있을법한 코드인 경우\n- 내부 로직이 크게 변경될 일이 없거나, 오버라이딩 되지 않는 경우\n\nhttps://stackoverflow.com/questions/2671496/when-to-use-static-methods\n\nhttps://www.tutorialspoint.com/When-to-use-static-methods-in-Java\n\nhttps://mygumi.tistory.com/253\n\np.s. Math.max() 같은 유틸리티 함수를 내가 작성할 일이 아예 없을 거라고 단정한 것 같은데, 실제로 개발하다 보면 사용하는 경우가 생기는가 보군요?\n\nstatic 메소드는 사용하기에 편리하고 보기에 깔끔한 코드를 작성하는 데에 유리하지만, 객체 지향적이지 않다고 말하는 사람들이 많습니다. 가장 큰 문제는 상태를 가지고 있지 않고 단순히 메소드(로직 포함)만 가지고 있는 구조입니다. 따라서 이를 많이 사용하게 된다면 절차 지향적인 프로그래밍을 하는 것이 됩니다.\n\n객체지향의 패러다임에서는, 객체를 설계하고 인스턴스 화 해서, 그것들로 하여금 원하는 시기와 방식으로 데이터를 관리할 수 있어야 합니다. 그러므로 static 메소드를 호출하는 대신 하고자 하는 동작을 미리 정의해놓고 노출한 객체를 만들어놓는 것이 바람직합니다. 유틸리티 함수를 사용하지 않는 것은 매우 힘든 일이지만, 사용하지 않도록 객체 지향적으로 변경하는 방법에 관해서 아래에 예시가 나와 있습니다.\n\nhttps://www.yegor256.com/2014/05/05/oop-alternative-to-utility-classes.html\n\n3.\n\n현재는 텍스트 몇 줄이라서 1KB도 안 되는 용량입니다. 지금은 불필요한 오버헤드가 발생할 수 있겠네요! 그래서 지금은 그냥 학습하는 용도로만 사용해보도록 하겠습니다. 추후에 스케일이 커진다면 성능의 차이가 뚜렷해질 것 같습니다. 아래는 성능 비교를 직접 테스트해 본 블로그입니다. 저도 조만간 한번 직접 테스트해 보겠습니다! 사소한 성능 차이가 스케일에 따라 어마어마하게 커질 것으로 예상이 되네요.\n\nhttps://bcho.tistory.com/288\n\nFileWriter에서 append값을 false로 한 이유는 저 부분이 modify나 delete 메소드에서의 코드 일부를 발췌한 것인데, 파일 입출력으로 수정사항을 다시 통째로 덮어쓰는 방법을 사용했기 때문입니다. DB가 없을 때 어떻게 파일 내용 중 일부를 수정하고 삭제할 수 있을 것인가? 파일을 읽으면서 포인터값을 조작할 수 있는지에 대한 학습이 좀 더 필요할 것 같습니다. 그리고 호눅스가 추천해준 .csv나 .json 포맷으로 입출력한다면 그러한 부분이 더 수월할지도 공부해 보아야겠습니다.\n\n-----------\n\n와우, 정말 상세한 답변 감사합니다! 이번 퀴즈도 역시나 정말로 많은 도움이 되었어요!!\n\n용어의 사용은 혼동을 주지 않으려면 정말 중요한 부분인 것 같아요!\n\nprivate을 사용하는 이유는 기본적인 부분에 대한 설명을 제가 빼먹었네요. '주체적이다'라는 표현은 좋은 말이네요!\n\nstatic과 final에 대해서는 충분히 이해했습니다. 감사합니다! 다만 스프링에서 좀 더 체감할 기회가 있어야 하겠네요.\n\n'절차 지향적'이라는 말은 저도 모르게 잘못 썼네요.. 용어 사용에 주의해야 겠습니다.\n\nflag의 불필요한 명시가 오히려 가독성을 떨어뜨릴 수 있겠군요!\n\n유틸리티 클래스도 좋은 방법이네요. 감사합니다! 정말 고마워요. @Dion\n\n","dir":"/TIL/2020-TIL/","name":"Dion Quiz.md","path":"TIL/2020-TIL/Dion Quiz.md","url":"/TIL/2020-TIL/Dion%20Quiz.html"},{"permalink":"/TIL/2020-TIL/","layout":"default","title":"2020-TIL","content":"# 2020-TIL\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/TIL/2020-TIL/","name":"README.md","path":"TIL/2020-TIL/README.md","url":"/TIL/2020-TIL/"},{"layout":"default","title":null,"content":"글쓰는데에는 최소한의 시간만 투자하고 코딩하는데 집중!\n\nTIL은 남에게 내용을 보여줄때는 카테고리별로 정리하는게 좋고, 취업할때 얼마나 공부한지 한눈에 보여주려면 날짜별로 정리하는 게 좋다.\n\n백엔드에서는 코드의 가독성과 성능이 가장 중요하다. 이를 위해서는 자료구조와 알고리즘을 학습하여 적절히 활용해야한다.\n\n 0 1 0 1 1 0 1 1\n\n 1 1 0 0 1 1 0 1\n\n1 0 0 1 0 1 0 0 0\n\nhttps://github.com/study-records/coding-interview-study/tree/master/Cracking_The_Coding_Interview/Chap9_Interview_Questions\n\n","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-04-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-04-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-04-TIL.html"},{"layout":"default","title":"2020-01-05-TIL","content":"# 2020-01-05-TIL\n\n## Today I learned\n\n### Relay\n\n도달거리가 멀리 있는 경우 저항이 커져서 전압이 손실된다. 그런데 릴레이를 중간에 여러개 달아주면 계속 전압이 증폭되어 최초의 전압을 유지할 수 있다. \n\nRelay -> 진공관 -> Transistor -> ICE\n\n### AND\n입력을 두 개 받고 한 relay의 출력을 다른 relay의 전압으로 연결하면 된다. (직렬연결)\n\n### OR\n입력을 두 개 받고 relay 두 개의 출력을 연결한다. (병렬연결)\n\n### NOT\nrelay를 반대로 스위치 on/off\n\n### 2의 보수\n이진수의 세상에서 어떤 수를 커다란 2의 제곱수에서 빼서 얻은 이진수. 다시 말해, 어떤 수 보다 더 큰 2의 제곱수가 되기 위해서 필요한 수 (두 수를 더하면 2의 제곱수가 되어야한다.)\nhttps://ko.wikipedia.org/wiki/2%EC%9D%98_%EB%B3%B4%EC%88%98\n\n\n### 시프트\n\n곱셈을 구현\n\n### etc\n\n특이하더라도 대단한걸 구현하면 합격한다...\n\n로직게이트 하나를 메서드 하나에 대응. input과 output도 메서드의 매개변수와 리턴값으로 대응.\n\n테스트할때는 임계값을 반드시 테스트하는것이 중요! 00000 11111\n\n깃에서는 삭제라는 개념이 존재하지 않는다. 그래서 새로운 브랜치를 생성한 뒤, 해당 브랜치로 이동하고 기존의 브랜치를 삭제하는 방식으로 해야한다.\n\n### 참고자료\n\nhttps://wikidocs.net/22308\n\n### 참고서적\n\n1. TCP/IP 쉽게, 더 쉽게 : http://www.yes24.com/Product/Goods/32203210\n2. 김영한 님 HTTP 강의 (https://www.inflearn.com/course/http-%EC%9B%B9-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC)\n3. 웹 개발자를 위한 웹을 지탱하는 기술 : http://www.yes24.com/Product/Goods/5170353?OzSrank=1\n4. HTTP 완벽 가이드 : http://www.yes24.com/Product/Goods/15381085\n5. CODE : http://www.yes24.com/Product/Goods/16667186?OzSrank=11\n\n## Today I've Done\n\n- [x] Binary Adder/Convertor를 자바로 구현\n- [x] Git에서 코드리뷰를 하는 방법 학습 (조직에 가입하고, 해당 리퍼지토리를 클론해서 브랜치를 만들고 커밋하여 풀 리퀘스트를 보내는 것 까지 완료)\n\n## Today I Thought\n\n취업이 목표이지만 취업을 좇아가기보다는 내 실력의 향상을 궁극적인 목표로 하자!\n\n오늘 한 스터디원 분이 \"이러한 CS지식은 실무에서 쓰이나요?\"라고 물어보았다. 디지털 논리회로와 컴퓨터구조와 관련된 지식이었다. 하지만 나는 이러한 지식들이 정확히 어느부분에서 사용될 수 있는지 정확히 알지못해서 답변해주지 못하였다. 다만, 대체적으로 백엔드 개발에서 DataBase > DataStructure/Algorithm > OperatingSystem > Computer Architecture 정도의 우선 순위를 갖는 것만 알고있다. 전공자로서 디지털 논리회로에서부터 DB까지 많은 내용중에 어떤 CS 전공지식을 중점적으로 학습해야 하는지도 헷갈리는데, 비전공자 분들의 입장에서는 얼마나 막막할까? 나도 얼른 열심히 공부해서 나름의 '실무' 노하우나 팁을 하나라도 알려줄 수 있는 사람이 되고싶다!","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-05-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-05-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-05-TIL.html"},{"layout":"default","title":"2020-01-06-TIL","content":"# 2020-01-06-TIL\n\n## Today I Learned\n\n### 자바 문자열 뒤집기\n\nhttps://jobc.tistory.com/175","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-06-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-06-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-06-TIL.html"},{"layout":"default","title":"2021-01-08-TIL","content":"# 2021-01-08-TIL\n\n### 리눅스의 역사\n\n타넨바움 교수가 미닉스를 개발해서 배포했는데, 리누스 토르발즈가 변경 요청을 했지만 받아들이지 않아서 포기하고 혼자서 만들게 되었다.\n\n\n\n### 쉘 스크립트\n\nhttps://twpower.github.io/131-simple-shell-script-syntax\n\n### 애자일\n\nhttps://brunch.co.kr/@insuk/5\n\n### 컴파일 과정\n\n\n\n### TCP/IP\n\nhostIP port guestIP port\n\n127.0.0.1 10022 10.0.2.15 22\n\n### SSH 비밀번호 없이 로그인\n\nhttps://opentutorials.org/module/432/3742\n\n### 리다이렉션\n\n### 파이프\n\n### 컴파일 과정\n\nhttps://gracefulprograming.tistory.com/16\n\n### 표준입력/표준출력/표준오류\n\nhttps://ttend.tistory.com/732\n\nhttps://shoark7.github.io/programming/knowledge/what-is-standard-stream\n\n### File Descriptor\n\nhttps://en.wikipedia.org/wiki/File_descriptor\n\n### Linux VFS\n\nhttps://www.kdata.or.kr/info/info_04_view.html?field=&keyword=&type=techreport&page=134&dbnum=128495&mode=detail&type=techreport\n\n\n\n리눅스 역사와 유닉스와 차이를 학습하고 정리한다. *\n\n여러 가지 쉘 종류에 대해 학습하고 정리한다. *\n\n본인만의 쉘 환경을 설정하고 정리해도 좋다.\n\n셀 스크립트에 활용한 다양한 사례에 대해서 조사하고 정리한다. *\n\n각자 컴퓨터 개발 환경에서 리눅스와 비슷한 터미널 환경을 설정하기 위한 방법을 학습하고 정리한다. *\n\nhttps://gist.github.com/mroderick/1afdd71aa69f6b29601d335751a1a9be","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-08-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-08-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-08-TIL.html"},{"layout":"default","title":"2021-01-10-TIL","content":"# 2021-01-10-TIL\n\n## 나만의 GitHub 프로필 꾸미기\n\n- https://butter-shower.tistory.com/142\n- https://arturssmirnovs.github.io/github-profile-readme-generator/\n- https://sujinlee.me/professional-github/\n- https://github.com/rahuldkjain/github-profile-readme-generator\n- https://velog.io/@loakick/Shield-IO-%EC%82%AC%EC%9A%A9%EB%B2%95-iojyndy4pi\n\n\n\n### Backend vs Back-end\n\nhttps://css-tricks.com/poll-results-front-end-front-end/\n\n### How to copy image from Typora to History\n\nhttps://organizeme.tistory.com/entry/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EC%9C%BC%EB%A1%9C-%EA%B8%80%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%98%EA%B3%A0-%ED%8B%B0%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%97%90-%EC%97%85%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0\n\nhttps://default-on.tistory.com/11\n\n\n\n### TODO\n\n- Java를 사용하여 Typora에서 삽입한 그림을 그대로 깃허브에 업로드링크를 가져와서 대체하는 코드를 작성해보기\n\n\n\n### 가고싶은 기업\n\n네카라쿠배, 토당야","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-10-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-10-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-10-TIL.html"},{"layout":"default","title":"2021-01-11-TIL","content":"# 2021-01-11-TIL\n\n### Json, Bson\n\n제이슨, 비산\n\n### Java에서 Random 문자열 생성\n\n- https://needneo.tistory.com/23\n\n### Java Linked List\n\n- https://freestrokes.tistory.com/84\n\n### 자료구조와 알고리즘\n\n- 빅오 표기법\n- 링크드 리스트\n - 싱글\n - 더블\n - 서큘라\n- 더블 서큘라 링크드 리스크 추천\n- 미션 수행\n\nclass node {\n\n}\n\nBig-O 표기법을 포함해서 여러 가지 복잡도에 대해 학습하고 정리한다. \n\nhttps://velog.io/@polynomeer/%EB%B9%85-%EC%98%A4Big-O%EC%99%80-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84\n\n연속 배열과 링크드 리스트의 차이점에 대해 이해하고, 언제 사용하는 것이 더 효율적인지 비교해서 정리한다.\n\nhttps://velog.io/@polynomeer/%EB%B0%B0%EC%97%B4Array%EA%B3%BC-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8Linked-List\n\n본인이 작성한 리스트에 추가할 때 시간 복잡도는 어떠한가? 더 개선할 부분이 있는가? \n\n본인이 작성한 리스트에서 삭제할 때 시간 복잡도는 어떠한가? 더 개선할 부분이 있는가?\n\n본인이 작성한 리스트에서 탐색할 때 시간 복잡도는 어떠한가? 더 개선할 부분이 있는가? *\n\n단일 연결 리스트, 이중 연결 리스트, 선형 리스트, 환형 리스트는 각각 어떤 특성을 갖고 있는지, 언제 활용하면 좋을지 생각하고 정리한다.\n\n자신이 사용하는 언어와 프레임워크에서는 배열과 리스트를 각각 어떻게 활용하고 있는지 정리한다. *\n\nhttps://velog.io/@polynomeer/Java%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8\n\nQueue에 대해 학습하고 링크드 리스트로 구현한다면 어떻게 구현할 수 있는지 설계한다. *\n\nhttps://velog.io/@polynomeer/Implement-Queue-using-LinkedList-in-Java\n\nDeque에 대해 학습하고 링크드 리스트로 구현한다면 어떻게 구현할 수 있는지 설계한다. *\n\nhttps://velog.io/@polynomeer/Implement-Deque-using-LinkedList-in-Java","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-11-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-11-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-11-TIL.html"},{"layout":"default","title":"2021-01-12-TIL","content":"# 2021-01-12-TIL\n\n### 이메일로 일하는 법\n\n알고리즘은 사용하는 일이 거의 없다. 하지만 자료구조는 매우 빈번하게 사용된다. \n\n\n\n알고리즘의 정의\n\n알고리즘의 조건 : 입력, 출력, 유한성\n\nThe Art of Programming\n\n1. 유한성(Fitness)\n2. 명확성(Defiteness)\n3. 입력(Input)\n4. 출력(Output)\n\n성능은 상한선이 하한선 보다 중요하다 -> 빅 오 표기법을 주로 사용한다.\n\n웹스케일의 시대에 많은 데이터를 다루기 위해서는 시간복잡도의 상한선을 고려한 설계가 매우 중요해졌다.\n\nO(n), O(nlogn) 정도를 빠른 알고리즘으로 생각한다\n\n페이스북 좋아요는 어떤식으로 구현되었나? O(N)이면 감당할 수 없을것\n\ncall by reference (class)\ncall by address (pointer)\ncall by value (struct)\n\nMDN, 스펙문서\n\nJDK 까보기\n\njava jdk linked list\n\n웨어 레벨링 ssd\n\n큐 구현체중에 링크드리스트가 가장 깔끔\n\n더미노드를 이용해서 서큘라 큐를 편하게 구현 - 매트릭스 센티널\n\nidx 가 cnt가 크다면 에러를 내거나 예외처리\n\n### Bash Shell 리턴값\n\n- https://twpower.github.io/134-how-to-return-shell-scipt-value\n\n### 알고리즘 공부자료\n\n- https://www.edwith.org/introalgorithm/\n\n### Java는 call-by-reference를 지원하는가\n\n- https://supdev.tistory.com/15\n\n### ADT\n\n- https://gbsb.tistory.com/306\n\n## LinkedList\n\n### Singly Linked List\n\n- https://atoz-develop.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%8B%A8%EC%88%9C-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%A0%95%EB%A6%AC-%EB%B0%8F-%EC%97%B0%EC%8A%B5%EB%AC%B8%EC%A0%9C\n\n### Circular Linked List\n\n- https://supark7.tistory.com/entry/%EC%9B%90%ED%98%95-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8-Circular-Linked-List\n\n### Doubly Linked List\n\n- https://opentutorials.org/module/1335/8941\n\n## HashMap\n\n### Java HashMap은 어떻게 동작하는가?\n\n- http://www.gisdeveloper.co.kr/?p=5332\n\n### HashMap에서 custom key 정의하기\n\n- http://www.gisdeveloper.co.kr/?p=5332\n\n### HashMap에서 forEach()문 사용하기\n\n- https://codechacha.com/ko/java-map-hashmap-foreach/\n\n### 순서가 보장된 HashMap : LinkedHashMap\n\n- https://tosuccess.tistory.com/138\n\n\n\n### IntelliJ 에서 자바 클래스로 부터 interface 뽑아내기\n\n- https://tiveloper.tistory.com/entry/%EA%B9%83%ED%84%B8%EB%B3%B4%EB%8B%A4-%EA%B0%80%EB%B2%BC%EC%9A%B4-%EC%9D%B8%ED%85%94%EB%A6%ACJ-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4IntelliJ-Idea-%ED%8C%81-8\n\n### 자바 인터페이스\n\nhttps://dahye-jeong.gitbook.io/java/java/undefined/java-interface\n\n","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-12-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-12-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-12-TIL.html"},{"layout":"default","title":"2021-01-13-TIL","content":"# 2021-01-13-TIL\n\n## JDK 소스코드 열어보기\n\n### IntelliJ 에서 열어보기\n\n아무 프로젝트나 생성해서 찾고자하는 라이브러리를 import한다.\n\n```\nimport java.util.ArrayList;\n```\n\n그리고 command + 왼쪽마우스 클릭을 하면 자동으로 External Library로 부터 소스코드가 펼쳐지면서 보인다.\n\n### JDK 경로로 직접 찾아가기\n\n- macOS\n\n /Library/Java/JavaVirtualMachines/jdk-version.jdk/Contents/Home/lib\n\n 해당 경로에 들어가면 src.zip 파일이 포함되어있다. 그 파일의 압축을 풀면 jdk 및 자바 라이브러리의 전체 소스코드를 확인할 수 있다.\n\n## Today I Thought\n\n꿈을 꿀 때는 흐릿한 꿈속에서 현실의 나 자신과 다르게 행동할 때가 많다. 윤리관과 가치관 까지도 흐릿해지기 때문이다.","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-13-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-13-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-13-TIL.html"},{"layout":"default","title":"2021-01-14-TIL","content":"# 2021-01-14-TIL\n\nsmall talk 30min tutorial\n\n### 객체지향 언어의 역사\n\n제록스 -> 마우스, GUI, 카피머신\n\nGUI 프로그래밍을 잘 하기위해서 small talk 언어를 만들었다.\n\n\n\n자율성여부가 현실세계와 소프트웨어 세계의 가장 큰 차이이다,\n\n\n\n삼각형의 넓이 구하기\n\n- 헤론의 공식 : https://ko.wikipedia.org/wiki/%ED%97%A4%EB%A1%A0%EC%9D%98_%EA%B3%B5%EC%8B%9D\n\n\n\nComparing Java objects with equals() and hashcode()\n\nhttps://www.infoworld.com/article/3305792/comparing-java-objects-with-equals-and-hashcode.html\n\n\n\nSOLID principles in Java\n\nhttps://www.educative.io/edpresso/what-are-the-solid-principles-in-java","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-14-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-14-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-14-TIL.html"},{"layout":"default","title":"2021-01-15-TIL","content":"# 2021-01-15-TIL\n\n\n\n객체를 호출하는것은 메시지를 보내는 것이다.\n\nLow coupling, high cohesion\n\nhttps://medium.com/clarityhub/low-coupling-high-cohesion-3610e35ac4a6\n\n+\n\n```\n(10,10)-(22,10)-(22,18)-(10,18)\n```\n\nTODO: 다형성을 적용하여 변경, 입력에 따라서 각 클래스의 메소드가 호출되도록\n\n### Git\n\n- https://guides.github.com/activities/hello-world/\n\n실제 프로젝트에서 **프로그램의 완성** 은 중요하다. 하지만 그 완성이 일회성은 아니므로 길게 보아야한다. 예를 들어, 과제의 수행을 위해서 이미 완성된 누군가의 코드를 블로그에서 ctrl+c, ctrl+v해서 완성은 할 수 있다. 하지만 이렇게 완성했을 때 다음번에 비슷하지만 다른 과제에서 오롯이 내 역량으로만 도움없이 해낼 수 있을까? 그때에도 붙여넣기할 코드가 어딘가에 있을거라고 믿는 것은 어리석은 일이다. 결국 그 블로그의 글 또한 누군가가 끊임없는 삽질과 시간을 투자한 결과물이다. 그 과정에서 '역량'의 향상이 이루어지는 것이지, 완성에서 그것이 키워지진 않는다.\n\n노력의 결과는 사용자에게 직접적인 영향을 끼치지만, 그 노력의 과정은 개발자에게 직접적으로 영향을 끼친다. 즉, 더 나은 개발자로의 성장의 밑거름은 바로 그 노력, 삽질인 것이다.\n\n- 사각형\n\n https://www.mathsisfun.com/quadrilaterals.html\n\n- 맥 UML 도구\n\n https://machow2.com/best-uml-mac/\n\n https://hoony-gunputer.tistory.com/entry/Intellij%EC%97%90%EC%84%9C-ClassDiagramUML-%EB%B3%B4%EA%B8%B0\n\n육각형 그려놓고 역량 표시해보기\n\n- 수업내용정리 by Woody\n\n https://www.notion.so/2eada1fbd4634b5081bbd7bf982387fc\n\n- 자바 메소드명\n\n https://blog.joda.org/2011/08/common-java-method-names.html\n\n https://docs.oracle.com/javase/tutorial/datetime/overview/naming.html\n\n http://fluxens.com/javastyle.html\n\n https://www.geeksforgeeks.org/java-naming-conventions/\n\n https://howtodoinjava.com/java/basics/java-naming-conventions/\n\n영화 추천\n\n내 이름은 칸, 루틴\n\n### Integer to Char in Java\n\nhttps://www.javatpoint.com/java-int-to-char\n\n### Double to Integer in Java\n\nhttps://www.educative.io/edpresso/how-to-convert-a-double-to-int-in-java","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-15-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-15-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-15-TIL.html"},{"layout":"default","title":"2021-01-17-TIL","content":"# 2021-01-17-TIL\n\n### Console color setting in Java \n\nhttps://forgiveall.tistory.com/466\n\n### How to execute java class file in Mac terminal\n\nhttps://stackoverflow.com/questions/24174947/mac-terminal-could-not-find-or-load-main-class-classname\n\n\n\n### How to get tree view? (Markdown directory structure)\n\n- tree in macOS\n\n http://mama.indstate.edu/users/ice/tree/\n\n https://eunguru.tistory.com/150\n\n- Markdown directory structure\n\n https://ko.ojit.com/so/unicode/14673\n\n https://jekyllrb.com/docs/structure/\n\n https://github.com/demun/FrontEndStudy/blob/master/document/%40Rule/%EB%AC%B8%EC%84%9C-%EC%9E%91%EC%84%B1-%EB%B0%A9%EB%B2%95.md\n\n\n ## Object vs Class vs Instance, what is the difference?\n\n - references\n https://stackoverflow.com/questions/2885385/what-is-the-difference-between-an-instance-and-an-object\n https://www.codementor.io/@stevedonovan/class-vs-object-vs-instance-14i2s2lu6r\n https://www.quora.com/What-is-the-difference-between-object-and-instance\n https://www.java67.com/2014/11/difference-between-instance-and-object-in-java.html\n https://levelup.gitconnected.com/what-is-difference-between-reference-object-instance-and-class-24721e526f9b\n https://cerulean.kkennib.com/149\n https://alfredjava.wordpress.com/2008/07/08/class-vs-object-vs-instance/\n https://www.ncl.ucar.edu/Document/HLUs/User_Guide/classes/classoview.shtml \n\n\n\n'객체지향의 사실과 오해'와 '오브젝트'를 스터디하고 계신다는 분이 객체지향 설계에 익숙해지려면 어떻게 해야하는지 궁금하다며 메일을 주셨습니다.답장을 드리고나니 (너무 뻔한 답변같지만) 페북에 남겨도 좋을것 같아 여기에도 올립니다.1. 도메인 관심사와 기술 관심사를 명확하게 분리하고, 도메인 관심사를 객체지향적으로 설계하는데 초점을 맞추세요.2. 처음부터 객체지향적으로 설계하기 어렵다면 먼저 작은 기능을 절차지향적으로 구현한 후 객체지향적인 설계를 향해 리팩토링하세요.3. 단위 테스트의 용이성으로 객체지향 설계의 품질을 측정하세요. 객체지향 설계의 품질이 좋으면 좋을수록 단위 테스트를 더 쉽게 작성할 수 있습니다.4. 디자인 패턴을 학습하고 디자인 패턴이 적용된 다양한 예를 살펴보세요. 디자인 패턴은 역할과 책임을 어떻게 분배하고 어떤 방식으로 협력해야 설계가 유연해지는 지 알려주는 훌륭한 참고서입니다.5. 좋은 설계는 한번에 완성되지 않습니다. 객체들의 협력이 자리잡을 때까지 반복적으로 리팩토링하세요.","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-17-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-17-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-17-TIL.html"},{"layout":"default","title":"2021-01-18-TIL","content":"# 2021-01-18-TIL\n\n### 리액티브 선언문\n\nhttps://www.reactivemanifesto.org/ko/glossary\n\n### Java Stream\n\nhttps://ryan-han.com/post/java/java-stream/\n\n### Java Stream sum\nhttps://www.baeldung.com/java-stream-sum\n\nhttps://medium.com/@kimddub/java-stream-%EA%B3%BC-lambda-%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-ab530e1c1034\n\nhttps://futurecreator.github.io/2018/08/26/java-8-streams/\n\n### 프로그래밍 패러다임\n\n- https://developer.qustory.com/post/programming-paradigm/\n- https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84\n- https://ko.wikipedia.org/wiki/%EB%AA%85%EB%A0%B9%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\n- https://ko.wikipedia.org/wiki/%EC%84%A0%EC%96%B8%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\n- https://ko.wikipedia.org/wiki/%EC%A0%88%EC%B0%A8%EC%A0%81_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\n- https://ko.wikipedia.org/wiki/%ED%95%A8%EC%88%98%ED%98%95_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\n- https://en.wikipedia.org/wiki/Programming_paradigm\n- https://freshrimpsushi.tistory.com/1361\n- https://www.geeksforgeeks.org/introduction-of-programming-paradigms/\n- https://cs.lmu.edu/~ray/notes/paradigms/\n- https://towardsdatascience.com/what-is-a-programming-paradigm-1259362673c2\n- https://www.freecodecamp.org/news/what-exactly-is-a-programming-paradigm/\n- https://digitalfellows.commons.gc.cuny.edu/2018/03/12/an-introduction-to-programming-paradigms/\n\n### 순수 함수\n\n- https://en.wikipedia.org/wiki/Pure_function\n- https://jeong-pro.tistory.com/23\n- https://evan-moon.github.io/2019/12/29/about-pure-functions/\n- https://www.freecodecamp.org/news/what-is-a-pure-function-in-javascript-acb887375dfe/\n- https://www.sitepoint.com/functional-programming-pure-functions/\n- https://blog.bitsrc.io/basics-of-javascript-pure-functions-3e6f3437066\n- https://programmingwithmosh.com/javascript/what-are-pure-functions/\n- https://stackoverflow.com/questions/58744557/is-this-a-pure-function\n- https://elmprogramming.com/pure-functions.html\n- https://www.sitepoint.com/functional-programming-pure-functions/\n\n특징 : 지역변수만 사용, call-by-value만 사용, 영향을 미치는 범위가 블록 내부에 한정\n\n### 클로저\n\n- https://opentutorials.org/course/743/6544\n\n- https://www.geeksforgeeks.org/closures-in-java-with-examples/\n\n- https://stackoverflow.com/questions/3805474/what-is-a-closure-does-java-have-closures/3805546\n\n \n\n- [ ] 클로저 closure에 대해 학습하고 정리한다. (예제 코드가 있다면 더 좋다. 리뷰할 때는 다른 언어와 차이점도 비교한다.)\n\n- [ ] 순수함수 pure function에 대해 학습하고 정리한다. (예제 코드가 있다면 더 좋다.)\n\n- [ ] 고차 함수 higher-order function에 대해 학습하고 정리한다. (예제 코드가 있다면 더 좋다. 언어별로 다른 점을 비교해보자.)\n\n- [ ] 프로그래밍 패러다임이 무엇인지 알아보고, 왜 필요한지 토론한다.\n\n- [ ] 객체지향 패러다임과 함수형 패러다임 공통점과 차이점을 토론한다.\n\n\n\n## Java 초보 때 자주하는 실수\n\n- 모두 static 필드 및 메서드로 선언해버린다. (main이 static이니깐 자연스럽게 에러 제거를 위해서)\n- 접근제한자를 모두 default나 public으로 선언해버린다.\n- main이나 한 메서드의 덩치가 너무 커져버린다.\n- 메서드는 단일 책임을 가져야 하는데 그렇지 않게 된다.\n- 클래스 단위와 이름이 명확하지 않고, 그 내용 또한 그러하다.\n- 메서드를 너무 잘게 쪼개서 오히려 가독성이 떨어진다.\n- 변수명에 a, b, c 또는 약자를 사용한다. 이는 가독성을 떨어뜨릴 뿐이다. IDE에서 자동완성 기능을 제공하므로, 이를 이용하여 약자를 사용하지않도록 하는 것이 좋다.\n- 들여쓰기가 3번 이상 나오는 경우가 많다. for ~ if ~ if ... 이런 경우 우선은 들여쓰기를 제거하도록 노력해본다. 하지만 불가피한 경우 내부 블록의 일부를 메서드로 빼낸다.\n- 주입을 하지않고 생성자를 마구 호출한다.\n\n### Java Stream vs for loop\n\n- https://blog.jdriven.com/2019/10/loop/\n\n### method를 pure method로 변경\n\n1. 클래스 변수를 지역 변수로 변경\n2. \n\nhttps://stackoverflow.com/questions/50466260/does-a-pure-method-have-to-be-static\n\nhttps://blog.knoldus.com/functional-java-understanding-pure-functions-with-java/\n\n### 1급 객체\n\nhttps://medium.com/@lazysoul/functional-programming-%EC%97%90%EC%84%9C-1%EA%B8%89-%EA%B0%9D%EC%B2%B4%EB%9E%80-ba1aeb048059\n\n### builder pattern\n\n\n\n### Method chaining with inheritance\n\nhttps://blog.advenoh.pe.kr/java/%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%83%81%EC%86%8D-%EA%B5%AC%EC%A1%B0%EC%97%90%EC%84%9C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B2%B4%EC%9D%B4%EB%8B%9D-%ED%95%B4%EB%B3%B4%EA%B8%B0-Method-Chaining-with-Inheritance/\n\n\n\n## Questions\n\nQ. 매개변수로 함수를 받는게 순수 함수인가? 그 함수도 순수함수라면?\n\nQ. static final을 붙여야 순수 함수인가?\n\nQ. final 클래스 변수를 사용하면 그것도 퓨어 함수인가? 로컬변수만\n\nQ. HashSet을 넣으면 외부에서 약수가 아닌 다른 HashSet을 넣으면 문제가 된다?\n\n## Tips\n\nTip. 그룹핑\n\nTip. range closed 사용하면 인덱스 + 1 안해줘도 된다.\n\n","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-18-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-18-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-18-TIL.html"},{"layout":"default","title":"2021-01-19-TIL","content":"# 2021-01-19-TIL\n\nTip. 백엔드 개발자, 프론트엔드 개발자, 모바일 개발자 는 신입 때 어필해야하는 요소가 아니다. 신입은 문제가 주어졌을 때 해결할 수 있는 개발자라는 점을 키워야하고 어필해야한다.\n\nTip. 매개변수가 너무 많다면 그 함수가 너무 많은 기능을 담당하고 있는것은 아닌지 검사해보아야한다. 기능을 축소한다면 매개변수의 개수는 줄어들것이다. \n\nTip. for를 사용하지 않고 forEach만을 사용하는 방법 연습\n\n클로저를 이해할 때 시점에 따라 다르게 생각해야한다. 선언할 때와 실행할 때 의미가 다르다.\n\n객체지향적 프로그래밍을 공부하다가 함수형 프로그래밍으로 넘어가는 것은 비교적 수월하나, 그 반대는 어렵다.\n\n1. 역할을 잘 정한다. 역할에 대한 블록을 집어들고 원하는 곳에 끼운다.\n2. 그렇게 정하면 파이프로 그 블록을 연결할 수 있다.\n3. 그 파이프인 LineA, LineB를 또다른 파이프의 함수로 사용할 수 있다.\n\n- 함수 합성\n\n```javascript\nconst lineA = pipe(method1, method2, method3);\nlineA([1,2,3])\nlineA(['foo'])\n\nmethod3(method2(method1[1,2,3]))\n```\n\nFP는 프로그래밍계의 산업혁명일까? 그렇다고 해도 아직 수공업으로 만드는 장인이 존재하듯이 OOP가 사라지진 않을 것 같다.\n\n함수 합성을 위해서는 요소에 속하는 함수들이 모두 순수해야한다. 순수함이 보장되어야 블록처럼 이어붙여서 실행한 그 덩어리 함수도 순수성이 보장된다.\n\n```javascript\nconst sum = (a) => (b) => (c) => a+b+c;\nconst foo = sum(1)(3);\nfoo(50);\n> 54\n```\n\n- 테스트 용이성\n\n같은 입력에 대해 같은 출력이 보장된다면, 테스트가 매우 용이하다. 순수함수 1만개가 상호연결되어 동작하는 프로그램에서 1개가 더 추가되어도 다시 테스트를 돌려서 모두 정상적으로 테스트가 된다면, 프로그램 전체도 정상적으로 동작한다는 것이 보장된다. 프로그램 전체도 순수함수이기 떄문이다.\n\n### method currying and chaiging\n\n- https://blog.revathskumar.com/2014/12/javascript-currying-and-chaining.html\n\n- https://stackoverflow.com/questions/4120968/javascript-currying-vs-method-chaining\n\nQ. 체이닝과 커링이 자바스크립트에서 코드는 다른데, 내부적으로도 다르다고 할 수 있는 건가요?\n\nQ. 순수함수의 순수성을 검증할만한 툴이나 프레임워크가 있는가?\n\nA. 테스트 코드를 작성해서 계속 동일한 입력에 대해 동일한 출력이 보장된다면 순수하다고 인정할 수 있다. 하지만 순수 함수라는 개념 자체는 이상적인 개념이다.\n\nQ. 체이닝과 커링의 차이점?\n\nA. 체이닝은 같은 타입을 리턴해야 가능하고, 커링은 그냥 연결\n\n### Pure Functions with Java\n\nhttps://blog.knoldus.com/functional-java-understanding-pure-functions-with-java/\n\n### Java8 : Lambdas\n\nhttps://www.oracle.com/technical-resources/articles/java/architect-lambdas-part1.html\n\nhttps://www.oracle.com/technical-resources/articles/java/architect-lambdas-part2.html\n\n\n\n### Database Index and Optimizer\n\nhttps://www.red-gate.com/simple-talk/sql/performance/index-selection-and-the-query-optimizer/\n\n### Enum in Java\n\nhttps://woowabros.github.io/tools/2017/07/10/java-enum-uses.html\n\n### String vs StringBuilder, StringBuffer\n\nhttps://ifuwanna.tistory.com/221\n\n- 공부할 거리 : 네이버 부스트코스 CS50, 함수형사고(닐 포드, 한빛미디어), 모던 자바 인 액션(라울 등, 한빛미디어), 스프링 입문을 위한 자바 객체 지향의 원리와 이해(김종민, 위키북스)\n\n### Mutable and Immutable data\n\n- https://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2\n\n- https://en.wikipedia.org/wiki/Immutable_object\n\n- https://towardsdatascience.com/immutable-vs-mutable-data-types-in-python-e8a9a6fcfbdc\n\n\n\n### OOP vs FP\n\nhttps://www.educba.com/functional-programming-vs-oop/\n\nhttps://medium.com/@shaistha24/functional-programming-vs-object-oriented-programming-oop-which-is-better-82172e53a526\n\nhttps://www.geeksforgeeks.org/difference-between-functional-programming-and-object-oriented-programming/\n\n\n\n### Parameter vs Argument\n\nhttps://stackoverflow.com/questions/156767/whats-the-difference-between-an-argument-and-a-parameter\n\n내가 아는 바에 의하면 파라미터는 함수의 시그니처에서 괄호안에 표시된 그 타입과 타입의 이름이고, 아규먼트는 실제로 그 함수를 호출할 때 파라미터로 전달되는 값이다. `Parameter == 매개변수`, `Argument == 인자, 인수`로 대응되는 것으로 보인다. 하지만 한글 표현에는 혼동의 여지가 너무 많다. 따라서 그냥 외래어 표기를 하는 것이 차라리 나은 것 같다.\n\n컴퓨터 용어를 영어와 대응하는 한글로 짝을 지어서 표로 정리하여 따로 페이지를 구성하면 블로그의 글을 이해하는데에 좀 더 도움이 될 것 같다.","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-19-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-19-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-19-TIL.html"},{"layout":"default","title":"2021-01-20-TIL","content":"# 2021-01-20-TIL\n\n### 공부할만한 것\n\nhttps://creately.com/lp/cisco-network-diagrams/\n\nhttps://developer.mozilla.org/ko/docs/Learn/Common_questions/How_does_the_Internet_work\n\nhttp://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9791185475318&orderClick=LAG&Kc=\n\nhttp://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9788996094036&orderClick=LEa&Kc=\n\nhttp://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=\n\nhttps://blog.choibom.com/book/2018/01/21/Effective-Java/#comments\n\nJava > Spring > DB > HTTP > OS\n\n회사 화장실을 가봐라. 깨끗한지 반드시 확인하라.\n\n면접 분위기가 그 회사를 대변한다.\n\n프로덕트 매니저, 리뷰어\n\n상호대차\n\n함수 명세서를 쓴다. 테스트를 잘 하기위해서 테스트코드도 작성 해야한다. 설계가 중요하다.\n\nisWhitespace(c)\n\n\n\n포드 대 페라리, 시네마 천국, \n\n### Jekyll\n\nhttps://wikidocs.net/91460\n\nhttp://labs.brandi.co.kr/2018/05/14/chunbs.html\n\nhttps://rian-yeji.github.io/jekyll/2019/05/09/jekyll-excute-local.html\n\nhttps://jamiekang.github.io/2017/04/28/working-jekyll-locally/\n\n### Jekyll 성능 개선\n\nhttps://jeongukjae.github.io/posts/1jekyll-%EC%86%8D%EB%8F%84-%EC%98%AC%EB%A6%AC%EA%B8%B0/\n\nhttps://yangeok.github.io/blog/2019/05/21/jekyll-caching.html\n\nhttps://www.sauru.so/blog/jekyll-build-performance-part1/\n\n### CDN\n\nhttps://derek-mun.com/contents/Contents-Github-page-image-loading-speed.html\n\n","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"2021-01-20-TIL.md","path":"TIL/2021-TIL/2021-01-TIL/2021-01-20-TIL.md","url":"/TIL/2021-TIL/2021-01-TIL/2021-01-20-TIL.html"},{"permalink":"/TIL/2021-TIL/2021-01-TIL/","layout":"default","title":"2021-01-TIL","content":"# 2021-01-TIL\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/TIL/2021-TIL/2021-01-TIL/","name":"README.md","path":"TIL/2021-TIL/2021-01-TIL/README.md","url":"/TIL/2021-TIL/2021-01-TIL/"},{"permalink":"/TIL/2021-TIL/","layout":"default","title":"2021-TIL","content":"# 2021-TIL\n\nsource: `{{ page.path }}`\n\n```\n{% raw %}{% include list.liquid all=true %}{% endraw %}\n\n{% include list.liquid all=true %}\n```\n\n{% include list.liquid all=true %}","dir":"/TIL/2021-TIL/","name":"README.md","path":"TIL/2021-TIL/README.md","url":"/TIL/2021-TIL/"},{"sort":1,"permalink":"/TIL/","layout":"default","title":"TIL","content":"<h1 id=\"til\">TIL</h1>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n\n\n- [2020-TIL](/TIL/2020-TIL/)\n    - [TIL](/TIL/2020-TIL/2020-11-06-TIL.html)\n    - [2020-11-17-TIL.md](/TIL/2020-TIL/2020-11-17-TIL.html)\n    - [2020-11-19-TIL.md](/TIL/2020-TIL/2020-11-19-TIL.html)\n    - [2020.11.20 TIL](/TIL/2020-TIL/2020-11-20-TIL.html)\n    - [2020-11-24-TIL.md](/TIL/2020-TIL/2020-11-24-TIL.html)\n    - [2020.11.25 TIL](/TIL/2020-TIL/2020-11-25-TIL.html)\n    - [2020.11.26 TIL](/TIL/2020-TIL/2020-11-26-TIL.html)\n    - [2020-11-27-TIL.md](/TIL/2020-TIL/2020-11-27-TIL.html)\n    - [2020.11.28 TIL](/TIL/2020-TIL/2020-11-28-TIL.html)\n    - [2020.11.30 TIL](/TIL/2020-TIL/2020-11-30-TIL.html)\n    - [2020.12.01 TIL](/TIL/2020-TIL/2020-12-01-TIL.html)\n    - [2020.12.03 TIL](/TIL/2020-TIL/2020-12-03-TIL.html)\n    - [2020-12-09-TIL.md](/TIL/2020-TIL/2020-12-09-TIL.html)\n    - [2020-12-19-TIL.md](/TIL/2020-TIL/2020-12-19-TIL.html)\n    - [Dion Quiz](/TIL/2020-TIL/Dion%20Quiz.html)\n- [2021-TIL](/TIL/2021-TIL/)\n    - [2021-01-TIL](/TIL/2021-TIL/2021-01-TIL/)\n        - [2021-01-04-TIL.md](/TIL/2021-TIL/2021-01-TIL/2021-01-04-TIL.html)\n        - [2020-01-05-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-05-TIL.html)\n        - [2020-01-06-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-06-TIL.html)\n        - [2021-01-08-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-08-TIL.html)\n        - [2021-01-10-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-10-TIL.html)\n        - [2021-01-11-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-11-TIL.html)\n        - [2021-01-12-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-12-TIL.html)\n        - [2021-01-13-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-13-TIL.html)\n        - [2021-01-14-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-14-TIL.html)\n        - [2021-01-15-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-15-TIL.html)\n        - [2021-01-17-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-17-TIL.html)\n        - [2021-01-18-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-18-TIL.html)\n        - [2021-01-19-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-19-TIL.html)\n        - [2021-01-20-TIL](/TIL/2021-TIL/2021-01-TIL/2021-01-20-TIL.html)\n</code></pre>  </div></div>\n\n<ul>\n <li><a href=\"/TIL/2020-TIL/\">2020-TIL</a>\n <ul>\n <li><a href=\"/TIL/2020-TIL/2020-11-06-TIL.html\">TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-17-TIL.html\">2020-11-17-TIL.md</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-19-TIL.html\">2020-11-19-TIL.md</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-20-TIL.html\">2020.11.20 TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-24-TIL.html\">2020-11-24-TIL.md</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-25-TIL.html\">2020.11.25 TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-26-TIL.html\">2020.11.26 TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-27-TIL.html\">2020-11-27-TIL.md</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-28-TIL.html\">2020.11.28 TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-11-30-TIL.html\">2020.11.30 TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-12-01-TIL.html\">2020.12.01 TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-12-03-TIL.html\">2020.12.03 TIL</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-12-09-TIL.html\">2020-12-09-TIL.md</a></li>\n <li><a href=\"/TIL/2020-TIL/2020-12-19-TIL.html\">2020-12-19-TIL.md</a></li>\n <li><a href=\"/TIL/2020-TIL/Dion%20Quiz.html\">Dion Quiz</a></li>\n </ul>\n </li>\n <li><a href=\"/TIL/2021-TIL/\">2021-TIL</a>\n <ul>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/\">2021-01-TIL</a>\n <ul>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-04-TIL.html\">2021-01-04-TIL.md</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-05-TIL.html\">2020-01-05-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-06-TIL.html\">2020-01-06-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-08-TIL.html\">2021-01-08-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-10-TIL.html\">2021-01-10-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-11-TIL.html\">2021-01-11-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-12-TIL.html\">2021-01-12-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-13-TIL.html\">2021-01-13-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-14-TIL.html\">2021-01-14-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-15-TIL.html\">2021-01-15-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-17-TIL.html\">2021-01-17-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-18-TIL.html\">2021-01-18-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-19-TIL.html\">2021-01-19-TIL</a></li>\n <li><a href=\"/TIL/2021-TIL/2021-01-TIL/2021-01-20-TIL.html\">2021-01-20-TIL</a></li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n","dir":"/TIL/","name":"README.md","path":"TIL/README.md","url":"/TIL/"},{"sort":2,"permalink":"/Archive/","layout":"default","title":"Archive","content":"<h1 id=\"archive\">Archive</h1>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n\n\n- [FP](/Archive/FP/)\n    - [Pure Function](/Archive/FP/Pure%20Function.html)\n    - [Closure](/Archive/FP/Closure.html)\n- [Java](/Archive/Java/)\n    - [GC](/Archive/Java/GC.html)\n    - [JVM](/Archive/Java/JVM.html)\n- [OOP](/Archive/OOP/)\n- [Programming](/Archive/Programming/)\n    - [Closure](/Archive/Programming/Closure.html)\n    - [Higher-order Function](/Archive/Programming/Higher-order%20Function.html)\n    - [Object-Oriented Programming(OOP) and Functional Programming(FP)](/Archive/Programming/Object-Oriented%20Programming(OOP)%20and%20Functional%20Programming(FP).html)\n    - [Programming Paradigm](/Archive/Programming/Programming%20Paradigms.html)\n    - [Pure Function](/Archive/Programming/Pure%20Function.html)\n- [Spring](/Archive/Spring/)\n    - [AOP](/Archive/Spring/AOP.html)\n    - [DI](/Archive/Spring/DI.html)\n</code></pre>  </div></div>\n\n<ul>\n <li><a href=\"/Archive/FP/\">FP</a>\n <ul>\n <li><a href=\"/Archive/FP/Pure%20Function.html\">Pure Function</a></li>\n <li><a href=\"/Archive/FP/Closure.html\">Closure</a></li>\n </ul>\n </li>\n <li><a href=\"/Archive/Java/\">Java</a>\n <ul>\n <li><a href=\"/Archive/Java/GC.html\">GC</a></li>\n <li><a href=\"/Archive/Java/JVM.html\">JVM</a></li>\n </ul>\n </li>\n <li><a href=\"/Archive/OOP/\">OOP</a></li>\n <li><a href=\"/Archive/Programming/\">Programming</a>\n <ul>\n <li><a href=\"/Archive/Programming/Closure.html\">Closure</a></li>\n <li><a href=\"/Archive/Programming/Higher-order%20Function.html\">Higher-order Function</a></li>\n <li><a href=\"/Archive/Programming/Object-Oriented%20Programming(OOP)%20and%20Functional%20Programming(FP).html\">Object-Oriented Programming(OOP) and Functional Programming(FP)</a></li>\n <li><a href=\"/Archive/Programming/Programming%20Paradigms.html\">Programming Paradigm</a></li>\n <li><a href=\"/Archive/Programming/Pure%20Function.html\">Pure Function</a></li>\n </ul>\n </li>\n <li><a href=\"/Archive/Spring/\">Spring</a>\n <ul>\n <li><a href=\"/Archive/Spring/AOP.html\">AOP</a></li>\n <li><a href=\"/Archive/Spring/DI.html\">DI</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/Archive/","name":"README.md","path":"Archive/README.md","url":"/Archive/"}]